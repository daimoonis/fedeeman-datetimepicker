{"version":3,"file":"fedeeman-datetimepicker-core.js.map","sources":["ng://fedeeman-datetimepicker/core/adapter/datetime-adapter.ts","ng://fedeeman-datetimepicker/core/adapter/datetime-formats.ts","ng://fedeeman-datetimepicker/core/adapter/native-datetime-adapter.ts","ng://fedeeman-datetimepicker/core/adapter/native-datetime-formats.ts","ng://fedeeman-datetimepicker/core/adapter/adapter.module.ts","ng://fedeeman-datetimepicker/core/datetimepicker/datetimepicker-animations.ts","ng://fedeeman-datetimepicker/core/datetimepicker/datetimepicker-errors.ts","ng://fedeeman-datetimepicker/core/datetimepicker/datetimepicker-filtertype.ts","ng://fedeeman-datetimepicker/core/datetimepicker/calendar.ts","ng://fedeeman-datetimepicker/core/datetimepicker/calendar-body.ts","ng://fedeeman-datetimepicker/core/datetimepicker/clock.ts","ng://fedeeman-datetimepicker/core/datetimepicker/datetimepicker.ts","ng://fedeeman-datetimepicker/core/datetimepicker/datetimepicker-input.ts","ng://fedeeman-datetimepicker/core/datetimepicker/datetimepicker-toggle.ts","ng://fedeeman-datetimepicker/core/datetimepicker/month-view.ts","ng://fedeeman-datetimepicker/core/datetimepicker/year-view.ts","ng://fedeeman-datetimepicker/core/datetimepicker/datetimepicker.module.ts"],"sourcesContent":["import { DateAdapter } from \"@angular/material/core\";\r\n\r\nexport abstract class DatetimeAdapter<D> extends DateAdapter<D> {\r\n\r\n  constructor(protected _delegate: DateAdapter<D>) {\r\n    super();\r\n  }\r\n\r\n  abstract getHour(date: D): number;\r\n\r\n  abstract getMinute(date: D): number;\r\n\r\n  abstract getFirstDateOfMonth(date: D): D;\r\n\r\n  abstract isInNextMonth(startDate: D, endDate: D): boolean;\r\n\r\n  abstract getHourNames(): string[];\r\n\r\n  abstract getMinuteNames(): string[];\r\n\r\n  abstract addCalendarHours(date: D, months: number): D;\r\n\r\n  abstract addCalendarMinutes(date: D, months: number): D;\r\n\r\n  abstract createDatetime(year: number, month: number, date: number, hour: number, minute: number): D;\r\n\r\n  getValidDateOrNull(obj: any): D | null {\r\n    return (this.isDateInstance(obj) && this.isValid(obj)) ? obj : null;\r\n  }\r\n\r\n  compareDatetime(first: D, second: D): number {\r\n    return this.compareDate(first, second) ||\r\n      this.getHour(first) - this.getHour(second) ||\r\n      this.getMinute(first) - this.getMinute(second);\r\n  }\r\n\r\n  sameDatetime(first: D | null, second: D | null): boolean {\r\n    if (first && second) {\r\n      const firstValid = this.isValid(first);\r\n      const secondValid = this.isValid(second);\r\n      if (firstValid && secondValid) {\r\n        return !this.compareDatetime(first, second);\r\n      }\r\n      return firstValid === secondValid;\r\n    }\r\n    return first === second;\r\n  }\r\n\r\n  sameYear(first: D, second: D) {\r\n    return first && second && this.getYear(first) === this.getYear(second);\r\n  }\r\n\r\n  sameDay(first: D, second: D) {\r\n    return first && second && this.getDate(first) === this.getDate(second) && this.sameMonthAndYear(first, second);\r\n  }\r\n\r\n  sameHour(first: D, second: D) {\r\n    return first && second && this.getHour(first) === this.getHour(second) && this.sameDay(first, second);\r\n  }\r\n\r\n  sameMinute(first: D, second: D) {\r\n    return first && second && this.getMinute(first) === this.getMinute(second) && this.sameHour(first, second);\r\n  }\r\n\r\n  sameMonthAndYear(first: D | null, second: D | null): boolean {\r\n    if (first && second) {\r\n      const firstValid = this.isValid(first);\r\n      const secondValid = this.isValid(second);\r\n      if (firstValid && secondValid) {\r\n        return !(this.getYear(first) - this.getYear(second) ||\r\n          this.getMonth(first) - this.getMonth(second));\r\n      }\r\n      return firstValid === secondValid;\r\n    }\r\n    return first === second;\r\n  }\r\n\r\n  // delegate\r\n  clone(date: D): D {\r\n    return this._delegate.clone(date);\r\n  }\r\n\r\n  addCalendarYears(date: D, years: number): D {\r\n    return this._delegate.addCalendarYears(date, years);\r\n  }\r\n\r\n  addCalendarMonths(date: D, months: number): D {\r\n    return this._delegate.addCalendarMonths(date, months);\r\n  }\r\n\r\n  addCalendarDays(date: D, days: number): D {\r\n    return this._delegate.addCalendarDays(date, days);\r\n  }\r\n\r\n  getYear(date: D): number {\r\n    return this._delegate.getYear(date);\r\n  }\r\n\r\n  getMonth(date: D): number {\r\n    return this._delegate.getMonth(date);\r\n  }\r\n\r\n  getDate(date: D): number {\r\n    return this._delegate.getDate(date);\r\n  }\r\n\r\n  getDayOfWeek(date: D): number {\r\n    return this._delegate.getDayOfWeek(date);\r\n  }\r\n\r\n  getMonthNames(style): string[] {\r\n    return this._delegate.getMonthNames(style);\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    return this._delegate.getDateNames();\r\n  }\r\n\r\n  getDayOfWeekNames(style): string[] {\r\n    return this._delegate.getDayOfWeekNames(style);\r\n  }\r\n\r\n  getYearName(date: D): string {\r\n    return this._delegate.getYearName(date);\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    return this._delegate.getFirstDayOfWeek();\r\n  }\r\n\r\n  getNumDaysInMonth(date: D): number {\r\n    return this._delegate.getNumDaysInMonth(date);\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number): D {\r\n    return this._delegate.createDate(year, month, date);\r\n  }\r\n\r\n  today(): D {\r\n    return this._delegate.today();\r\n  }\r\n\r\n  parse(value: any, parseFormat: any): D | null {\r\n    return this._delegate.parse(value, parseFormat);\r\n  }\r\n\r\n  format(date: D, displayFormat: any): string {\r\n    return this._delegate.format(date, displayFormat);\r\n  }\r\n\r\n  toIso8601(date: D): string {\r\n    return this._delegate.toIso8601(date);\r\n  }\r\n\r\n  isDateInstance(obj: any): boolean {\r\n    return this._delegate.isDateInstance(obj);\r\n  }\r\n\r\n  isValid(date: D): boolean {\r\n    return this._delegate.isValid(date);\r\n  }\r\n\r\n  invalid(): D {\r\n    return this._delegate.invalid();\r\n  }\r\n\r\n  clampDate(date: D, min?: D | null, max?: D | null): D {\r\n    if (min && this.compareDatetime(date, min) < 0) {\r\n      return min;\r\n    }\r\n    if (max && this.compareDatetime(date, max) > 0) {\r\n      return max;\r\n    }\r\n    return date;\r\n  }\r\n}\r\n","import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface MatDatetimeFormats {\r\n  parse: {\r\n    dateInput?: any;\r\n    monthInput?: any;\r\n    timeInput?: any;\r\n    datetimeInput?: any;\r\n  };\r\n  display: {\r\n    dateInput: any;\r\n    monthInput: any;\r\n    timeInput: any;\r\n    datetimeInput: any;\r\n    monthYearLabel: any;\r\n    dateA11yLabel: any;\r\n    monthYearA11yLabel: any;\r\n    popupHeaderDateLabel: any;\r\n  };\r\n}\r\n\r\nexport const MAT_DATETIME_FORMATS = new InjectionToken<MatDatetimeFormats>(\"mat-datetime-formats\");\r\n","import {\r\n  Inject,\r\n  Injectable,\r\n  Optional\r\n} from \"@angular/core\";\r\nimport {\r\n  DateAdapter,\r\n  MAT_DATE_LOCALE\r\n} from \"@angular/material\";\r\nimport { DatetimeAdapter } from \"./datetime-adapter\";\r\n\r\n/** The default hour names to use if Intl API is not available. */\r\nconst DEFAULT_HOUR_NAMES = range(24, i => String(i));\r\n\r\n/** The default minute names to use if Intl API is not available. */\r\nconst DEFAULT_MINUTE_NAMES = range(60, i => String(i));\r\n\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n@Injectable()\r\nexport class NativeDatetimeAdapter extends DatetimeAdapter<Date> {\r\n\r\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, _delegate: DateAdapter<Date>) {\r\n    super(_delegate);\r\n    this.setLocale(matDateLocale);\r\n  }\r\n\r\n  clone(date: Date): Date {\r\n    return this.createDatetime(this.getYear(date), this.getMonth(date), this.getDate(date), this.getHour(date), this.getMinute(date));\r\n  }\r\n\r\n  getHour(date: Date): number {\r\n    return date.getHours();\r\n  }\r\n\r\n  getMinute(date: Date): number {\r\n    return date.getMinutes();\r\n  }\r\n\r\n  isInNextMonth(startDate: Date, endDate: Date): boolean {\r\n    const nextMonth = this.getDateInNextMonth(startDate);\r\n    return this.sameMonthAndYear(nextMonth, endDate);\r\n  }\r\n\r\n  createDatetime(year: number, month: number, date: number, hour: number, minute: number): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    if (hour < 0 || hour > 23) {\r\n      throw Error(`Invalid hour \"${hour}\". Hour has to be between 0 and 23.`);\r\n    }\r\n\r\n    if (minute < 0 || minute > 59) {\r\n      throw Error(`Invalid minute \"${minute}\". Minute has to be between 0 and 59.`);\r\n    }\r\n\r\n    const result = this._createDateWithOverflow(year, month, date, hour, minute);\r\n\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() !== month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private getDateInNextMonth(date: Date) {\r\n    return new Date(date.getFullYear(), date.getMonth() + 1, 1,\r\n      date.getHours(), date.getMinutes());\r\n  }\r\n\r\n  getFirstDateOfMonth(date: Date): Date {\r\n    const result = new Date();\r\n    result.setFullYear(date.getFullYear(), date.getMonth(), 1);\r\n    return result;\r\n  }\r\n\r\n  getHourNames(): string[] {\r\n    return DEFAULT_HOUR_NAMES;\r\n  }\r\n\r\n  getMinuteNames(): string[] {\r\n    return DEFAULT_MINUTE_NAMES;\r\n  }\r\n\r\n  addCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\r\n\r\n  addCalendarMonths(date: Date, months: number): Date {\r\n    let newDate = this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date), this.getHour(date), this.getMinute(date));\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (this.getMonth(newDate) !== ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0, this.getHour(date), this.getMinute(date));\r\n    }\r\n\r\n    return newDate;\r\n  }\r\n\r\n  addCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days, this.getHour(date), this.getMinute(date));\r\n  }\r\n\r\n  addCalendarHours(date: Date, hours: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date), this.getDate(date),\r\n      this.getHour(date) + hours, this.getMinute(date));\r\n  }\r\n\r\n  addCalendarMinutes(date: Date, minutes: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date), this.getDate(date),\r\n      this.getHour(date), this.getMinute(date) + minutes);\r\n  }\r\n\r\n  toIso8601(date: Date): string {\r\n    return super.toIso8601(date) + \"T\" + [\r\n      this._2digit(date.getUTCHours()),\r\n      this._2digit(date.getUTCMinutes())\r\n    ].join(\":\");\r\n  }\r\n\r\n  /**\r\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\r\n   * other browsers do not. We remove them to make output consistent and because they interfere with\r\n   * date parsing.\r\n   * @param str The string to strip direction characters from.\r\n   * @returns The stripped string.\r\n   */\r\n  private _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, \"\");\r\n  }\r\n\r\n  /**\r\n   * Pads a number to make it two digits.\r\n   * @param n The number to pad.\r\n   * @returns The padded number.\r\n   */\r\n  private _2digit(n: number) {\r\n    return (\"00\" + n).slice(-2);\r\n  }\r\n\r\n  /** Creates a date but allows the month and date to overflow. */\r\n  private _createDateWithOverflow(year: number, month: number, date: number,\r\n                                  hours: number, minutes: number) {\r\n    const result = new Date(year, month, date, hours, minutes);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import { MatDatetimeFormats } from \"./datetime-formats\";\r\n\r\nexport const MAT_NATIVE_DATETIME_FORMATS: MatDatetimeFormats = {\r\n  parse: {},\r\n  display: {\r\n    dateInput: {year: \"numeric\", month: \"2-digit\", day: \"2-digit\"},\r\n    monthInput: {month: \"long\"},\r\n    datetimeInput: {year: \"numeric\", month: \"2-digit\", day: \"2-digit\", hour: \"2-digit\", minute: \"2-digit\"},\r\n    timeInput: {hour: \"2-digit\", minute: \"2-digit\"},\r\n    monthYearLabel: {year: \"numeric\", month: \"short\"},\r\n    dateA11yLabel: {year: \"numeric\", month: \"long\", day: \"numeric\"},\r\n    monthYearA11yLabel: {year: \"numeric\", month: \"long\"},\r\n    popupHeaderDateLabel: {weekday: \"short\", month: \"short\", day: \"2-digit\"}\r\n  }\r\n};\r\n","import { NgModule } from \"@angular/core\";\r\nimport {\r\n  MatNativeDateModule,\r\n  NativeDateModule\r\n} from \"@angular/material\";\r\nimport { DatetimeAdapter } from \"./datetime-adapter\";\r\nimport { MAT_DATETIME_FORMATS } from \"./datetime-formats\";\r\nimport { NativeDatetimeAdapter } from \"./native-datetime-adapter\";\r\nimport { MAT_NATIVE_DATETIME_FORMATS } from \"./native-datetime-formats\";\r\n\r\n// tslint:disable max-classes-per-file\r\n@NgModule({\r\n  imports: [NativeDateModule],\r\n  providers: [\r\n    {\r\n      provide: DatetimeAdapter,\r\n      useClass: NativeDatetimeAdapter\r\n    }\r\n  ]\r\n})\r\nexport class NativeDatetimeModule {\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    NativeDatetimeModule,\r\n    MatNativeDateModule\r\n  ],\r\n  providers: [{provide: MAT_DATETIME_FORMATS, useValue: MAT_NATIVE_DATETIME_FORMATS}]\r\n})\r\nexport class MatNativeDatetimeModule {\r\n}\r\n","import {\r\n  animate,\r\n  AnimationTriggerMetadata,\r\n  keyframes,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger\r\n} from \"@angular/animations\";\r\n\r\n/**\r\n * This animation fades in the background color and text content of the\r\n * select's options. It is time delayed to occur 100ms after the overlay\r\n * panel has transformed in.\r\n */\r\nexport const fadeInContent: AnimationTriggerMetadata = trigger(\"fadeInContent\", [\r\n  state(\"showing\", style({opacity: 1})),\r\n  transition(\"void => showing\", [\r\n    style({opacity: 0}),\r\n    animate(`150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)`)\r\n  ])\r\n]);\r\n\r\nexport const slideCalendar: AnimationTriggerMetadata = trigger(\"slideCalendar\", [\r\n  transition(\"* => left\", [\r\n    animate(180, keyframes([\r\n      style({transform: \"translateX(100%)\", offset: 0.5}),\r\n      style({transform: \"translateX(-100%)\", offset: 0.51}),\r\n      style({transform: \"translateX(0)\", offset: 1})\r\n    ]))\r\n  ]),\r\n  transition(\"* => right\", [\r\n    animate(180, keyframes([\r\n      style({transform: \"translateX(-100%)\", offset: 0.5}),\r\n      style({transform: \"translateX(100%)\", offset: 0.51}),\r\n      style({transform: \"translateX(0)\", offset: 1})\r\n    ]))\r\n  ])\r\n]);\r\n","/** @docs-private */\r\nexport function createMissingDateImplError(provider: string) {\r\n  return Error(\r\n      `MatDatetimepicker: No provider found for ${provider}. You must import one of the following ` +\r\n      `modules at your application root: MatNativeDatetimeModule, MatMomentDatetimeModule, or provide a ` +\r\n      `custom implementation.`);\r\n}\r\n","export enum MatDatetimepickerFilterType {\r\n  DATE, HOUR, MINUTE\r\n}\r\n","import {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW\r\n} from \"@angular/cdk/keycodes\";\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation\r\n} from \"@angular/core\";\r\nimport { MatDatepickerIntl } from \"@angular/material\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { first } from \"rxjs/operators\";\r\nimport { DatetimeAdapter } from \"../adapter/datetime-adapter\";\r\nimport {\r\n  MAT_DATETIME_FORMATS,\r\n  MatDatetimeFormats\r\n} from \"../adapter/datetime-formats\";\r\nimport { slideCalendar } from \"./datetimepicker-animations\";\r\nimport { createMissingDateImplError } from \"./datetimepicker-errors\";\r\nimport { MatDatetimepickerFilterType } from \"./datetimepicker-filtertype\";\r\n\r\n/**\r\n * A calendar that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: \"mat-datetimepicker-calendar\",\r\n  template: `<div class=\"mat-datetimepicker-calendar-header\">\r\n  <div *ngIf=\"type !== 'time'\"\r\n       class=\"mat-datetimepicker-calendar-header-year\"\r\n       [class.active]=\"_currentView == 'year'\"\r\n       (click)=\"_yearClicked()\">{{ _yearLabel }}\r\n  </div>\r\n  <div class=\"mat-datetimepicker-calendar-header-date-time\">\r\n    <span *ngIf=\"type !== 'time'\"\r\n          class=\"mat-datetimepicker-calendar-header-date\"\r\n          [class.active]=\"_currentView == 'month'\"\r\n          [class.not-clickable]=\"type === 'month'\"\r\n          (click)=\"_dateClicked()\" style=\"font-size: 0.7em;\">{{ _dateLabel }}</span>\r\n    <span *ngIf=\"type.endsWith('time')\"\r\n          class=\"mat-datetimepicker-calendar-header-time\"\r\n          [class.active]=\"_currentView == 'clock'\">\r\n      <span class=\"mat-datetimepicker-calendar-header-hours\"\r\n            [class.active]=\"_clockView == 'hour'\"\r\n            (click)=\"_hoursClicked()\">{{ _hoursLabel }}</span>:<span class=\"mat-datetimepicker-calendar-header-minutes\"\r\n                                                                     [class.active]=\"_clockView == 'minute'\"\r\n                                                                     (click)=\"_minutesClicked()\">{{ _minutesLabel }}</span>\r\n    </span>\r\n  </div>\r\n</div>\r\n<div class=\"mat-datetimepicker-calendar-content\" [ngSwitch]=\"_currentView\">\r\n  <div class=\"mat-month-content\" *ngIf=\"_currentView === 'month' || _currentView === 'year'\">\r\n    <div class=\"mat-datetimepicker-calendar-controls\">\r\n      <div class=\"mat-datetimepicker-calendar-previous-button\"\r\n           [class.disabled]=\"!_previousEnabled()\" (click)=\"_previousClicked()\"\r\n           aria-label=\"Previous month\">\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n          <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"></path>\r\n        </svg>\r\n      </div>\r\n      <div class=\"mat-datetimepicker-calendar-period-button\" [@slideCalendar]=\"_calendarState\"\r\n           (@slideCalendar.done)=\"_calendarStateDone()\">\r\n        <strong>{{ _monthYearLabel }}</strong>\r\n      </div>\r\n      <div class=\"mat-datetimepicker-calendar-next-button\"\r\n           [class.disabled]=\"!_nextEnabled()\" (click)=\"_nextClicked()\"\r\n           aria-label=\"Next month\">\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n          <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"></path>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <mat-datetimepicker-month-view *ngSwitchCase=\"'month'\"\r\n                                 [activeDate]=\"_activeDate\"\r\n                                 [type]=\"type\"\r\n                                 [selected]=\"_activeDate\"\r\n                                 [dateFilter]=\"_dateFilterForViews\"\r\n                                 (selectedChange)=\"_dateSelected($event)\"\r\n                                 (_userSelection)=\"_userSelected()\">\r\n  </mat-datetimepicker-month-view>\r\n  <mat-datetimepicker-year-view *ngSwitchCase=\"'year'\"\r\n                                [activeDate]=\"_activeDate\"\r\n                                [type]=\"type\"\r\n                                [selected]=\"_activeDate\"\r\n                                [dateFilter]=\"_dateFilterForViews\"\r\n                                (selectedChange)=\"_monthSelected($event)\"\r\n                                (_userSelection)=\"_userSelected()\">\r\n  </mat-datetimepicker-year-view>\r\n  <mat-datetimepicker-clock *ngSwitchDefault\r\n                            [startView]=\"_clockView\"\r\n                            [interval]=\"timeInterval\"\r\n                            [minDate]=\"minDate\"\r\n                            [maxDate]=\"maxDate\"\r\n                            [dateFilter]=\"dateFilter\"\r\n                            [selected]=\"_activeDate\"\r\n                            (activeDateChange)=\"_onActiveDateChange($event)\"\r\n                            (selectedChange)=\"_timeSelected($event)\"\r\n                            (_userSelection)=\"_userSelected()\">\r\n  </mat-datetimepicker-clock>\r\n  <div class=\"mat-datetimepicker-calendar-footer\">\r\n    <button mat-button color=\"primary\" (click)=\"_handleCancelButton($event)\">{{ cancelButtonLabel }}</button>\r\n    <button mat-raised-button color=\"primary\" (click)=\"_handleConfirmButton($event)\">{{ confirmButtonLabel }}</button>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`.mat-datetimepicker-calendar{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block;outline:0}.mat-datetimepicker-calendar[mode=landscape]{display:flex}.mat-datetimepicker-calendar-header{padding:16px;font-size:14px;color:#fff;box-sizing:border-box}[mode=landscape] .mat-datetimepicker-calendar-header{width:150px;min-width:150px}.mat-datetimepicker-calendar-header-date-time,.mat-datetimepicker-calendar-header-year{width:100%;font-weight:500;white-space:nowrap}.mat-datetimepicker-calendar-header-date-time{font-size:30px;line-height:30px}[mode=landscape] .mat-datetimepicker-calendar-header-date-time{white-space:normal;word-wrap:break-word}.mat-datetimepicker-calendar-header-date:not(.active),.mat-datetimepicker-calendar-header-hours:not(.active),.mat-datetimepicker-calendar-header-minutes:not(.active),.mat-datetimepicker-calendar-header-year:not(.active){cursor:pointer;opacity:.6}.mat-datetimepicker-calendar-header-date.not-clickable,.mat-datetimepicker-calendar-header-hours.not-clickable,.mat-datetimepicker-calendar-header-minutes.not-clickable,.mat-datetimepicker-calendar-header-year.not-clickable{cursor:initial}.mat-datetimepicker-calendar-header-time{padding-left:8px;padding-top:5px}.mat-datetimepicker-calendar-header-time:not(.active){opacity:.6}.mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-hours,.mat-datetimepicker-calendar-header-time:not(.active) .mat-datetimepicker-calendar-header-minutes{cursor:pointer;opacity:1}[mode=landscape] .mat-datetimepicker-calendar-header-time{display:block;padding-left:0}.mat-datetimepicker-calendar-content{width:100%;padding:0 8px 8px;outline:0;box-sizing:border-box;overflow:hidden}[mode=landscape] .mat-datetimepicker-calendar-content{padding-top:8px}.mat-datetimepicker-calendar-content>.mat-datetimepicker-calendar-footer{padding:12px;text-align:right}.mat-datetimepicker-calendar-controls{display:flex;justify-content:space-between}.mat-datetimepicker-calendar-period-button{display:inline-block;height:48px;padding:12px;outline:0;border:0;background:0 0;box-sizing:border-box}.mat-datetimepicker-calendar-next-button,.mat-datetimepicker-calendar-previous-button{display:inline-block;width:48px;height:48px;padding:12px;outline:0;border:0;cursor:pointer;background:0 0;box-sizing:border-box}.mat-datetimepicker-calendar-next-button.disabled,.mat-datetimepicker-calendar-previous-button.disabled{color:rgba(0,0,0,.38);pointer-events:none}.mat-datetimepicker-calendar-next-button svg,.mat-datetimepicker-calendar-previous-button svg{fill:currentColor;vertical-align:top}.mat-datetimepicker-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-datetimepicker-calendar-table-header{color:rgba(0,0,0,.38)}.mat-datetimepicker-calendar-table-header th{text-align:center;font-size:11px;padding:0 0 8px}@media (min-width:480px){.mat-datetimepicker-calendar[mode=auto]{display:flex}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header{width:150px;min-width:150px}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header-date-time{white-space:normal;word-wrap:break-word}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-header-time{display:block;padding-left:0}.mat-datetimepicker-calendar[mode=auto] .mat-datetimepicker-calendar-content{padding-top:8px}}`],\r\n  host: {\r\n    \"[class.mat-datetimepicker-calendar]\": \"true\",\r\n    \"tabindex\": \"0\",\r\n    \"(keydown)\": \"_handleCalendarBodyKeydown($event)\"\r\n  },\r\n  animations: [slideCalendar],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatDatetimepickerCalendar<D> implements AfterContentInit, OnDestroy {\r\n\r\n  private _intlChanges: Subscription;\r\n\r\n  @Output() _userSelection = new EventEmitter<void>();\r\n\r\n  @Input() type: \"date\" | \"time\" | \"month\" | \"datetime\" = \"date\";\r\n\r\n  /** A date representing the period (month or year) to start the calendar in. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    return this._startAt;\r\n  }\r\n\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._adapter.getValidDateOrNull(value);\r\n  }\r\n\r\n  private _startAt: D | null;\r\n\r\n  /** Whether the calendar should be started in month or year view. */\r\n  @Input() startView: \"clock\" | \"month\" | \"year\" = \"month\";\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(value: D | null) {\r\n    this._selected = this._adapter.getValidDateOrNull(value);\r\n  }\r\n\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._adapter.getValidDateOrNull(value);\r\n  }\r\n\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._adapter.getValidDateOrNull(value);\r\n  }\r\n\r\n  private _maxDate: D | null;\r\n\r\n  @Input() timeInterval: number = 1;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D, type: MatDatetimepickerFilterType) => boolean;\r\n\r\n  /** Emits when the currently selected date changes. */\r\n  @Output() selectedChange = new EventEmitter<D>();\r\n\r\n  /** Date filter for the month and year views. */\r\n  _dateFilterForViews = (date: D) => {\r\n    return !!date &&\r\n      (!this.dateFilter || this.dateFilter(date, MatDatetimepickerFilterType.DATE)) &&\r\n      (!this.minDate || this._adapter.compareDate(date, this.minDate) >= 0) &&\r\n      (!this.maxDate || this._adapter.compareDate(date, this.maxDate) <= 0);\r\n  };\r\n\r\n  /**\r\n   * The current active date. This determines which time period is shown and which date is\r\n   * highlighted when using keyboard navigation.\r\n   */\r\n  get _activeDate(): D {\r\n    return this._clampedActiveDate;\r\n  }\r\n\r\n  set _activeDate(value: D) {\r\n    const oldActiveDate = this._clampedActiveDate;\r\n    this._clampedActiveDate = this._adapter.clampDate(value, this.minDate, this.maxDate);\r\n    if (oldActiveDate && this._clampedActiveDate && this._currentView === \"month\" &&\r\n      !this._adapter.sameMonthAndYear(oldActiveDate, this._clampedActiveDate)) {\r\n      if (this._adapter.isInNextMonth(oldActiveDate, this._clampedActiveDate)) {\r\n        this.calendarState(\"right\");\r\n      } else {\r\n        this.calendarState(\"left\");\r\n      }\r\n    }\r\n  }\r\n\r\n  private _clampedActiveDate: D;\r\n\r\n  _userSelected(): void {\r\n    this._userSelection.emit();\r\n  }\r\n\r\n  /** Whether the calendar is in month view. */\r\n  _currentView: \"clock\" | \"month\" | \"year\" = \"month\";\r\n  _clockView: \"hour\" | \"minute\" = \"hour\";\r\n\r\n  /** The label for the current calendar view. */\r\n  get _yearLabel(): string {\r\n    return this._adapter.getYearName(this._activeDate);\r\n  }\r\n\r\n  get _monthYearLabel(): string {\r\n    return this._currentView === \"month\" ? this._adapter.getMonthNames(\"long\")[this._adapter.getMonth(this._activeDate)] :\r\n      this._adapter.getYearName(this._activeDate);\r\n  }\r\n\r\n  get _dateLabel(): string {\r\n    if (this.type === \"month\") {\r\n      return this._adapter.getMonthNames(\"long\")[this._adapter.getMonth(this._activeDate)];\r\n    }\r\n    return this._adapter.format(this._activeDate, this._dateFormats.display.popupHeaderDateLabel);\r\n\r\n  }\r\n\r\n  get _hoursLabel(): string {\r\n    return this._2digit(this._adapter.getHour(this._activeDate));\r\n  }\r\n\r\n  get _minutesLabel(): string {\r\n    return this._2digit(this._adapter.getMinute(this._activeDate));\r\n  }\r\n\r\n  _calendarState: string;\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _intl: MatDatepickerIntl,\r\n              private _ngZone: NgZone,\r\n              @Optional() private _adapter: DatetimeAdapter<D>,\r\n              @Optional() @Inject(MAT_DATETIME_FORMATS) private _dateFormats: MatDatetimeFormats,\r\n              changeDetectorRef: ChangeDetectorRef) {\r\n    if (!this._adapter) {\r\n      throw createMissingDateImplError(\"DatetimeAdapter\");\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError(\"MAT_DATETIME_FORMATS\");\r\n    }\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._activeDate = this.startAt || this._adapter.today();\r\n    this._focusActiveCell();\r\n    if (this.type === \"month\") {\r\n      this._currentView = \"year\";\r\n    } else if (this.type === \"time\") {\r\n      this._currentView = \"clock\";\r\n    } else {\r\n      this._currentView = this.startView || \"month\";\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n  }\r\n\r\n  /** Handles date selection in the month view. */\r\n  _dateSelected(date: D): void {\r\n    this._activeDate = date;\r\n    if (this.type !== \"date\") {\r\n      this._currentView = \"clock\";\r\n    }\r\n  }\r\n\r\n  /** Handles month selection in the year view. */\r\n  _monthSelected(month: D): void {\r\n    this._activeDate = month;\r\n    if (this.type !== 'month') {\r\n      this._currentView = \"month\";\r\n      this._clockView = \"hour\";\r\n    }\r\n  }\r\n\r\n  _timeSelected(date: D): void {\r\n    this._activeDate = date;\r\n    this._clockView = \"minute\";\r\n  }\r\n\r\n  @Input() confirmButtonLabel: string;\r\n  _handleConfirmButton(event): void {\r\n    this.selectedChange.emit(this._activeDate);\r\n    this._userSelected();\r\n  }\r\n\r\n  @Input() cancelButtonLabel: string;\r\n  _handleCancelButton(event): void {\r\n    // Close dialog (datetimepicker.close())\r\n    this._userSelection.emit();\r\n\r\n  }\r\n\r\n  _onActiveDateChange(date: D) {\r\n    this._activeDate = date;\r\n  }\r\n\r\n  _yearClicked(): void {\r\n    this._currentView = \"year\";\r\n  }\r\n\r\n  _dateClicked(): void {\r\n    if (this.type !== 'month') {\r\n      this._currentView = \"month\";\r\n    }\r\n  }\r\n\r\n  _hoursClicked(): void {\r\n    this._currentView = \"clock\";\r\n    this._clockView = \"hour\";\r\n  }\r\n\r\n  _minutesClicked(): void {\r\n    this._currentView = \"clock\";\r\n    this._clockView = \"minute\";\r\n  }\r\n\r\n  /** Handles user clicks on the previous button. */\r\n  _previousClicked(): void {\r\n    this._activeDate = this._currentView === \"month\" ?\r\n      this._adapter.addCalendarMonths(this._activeDate, -1) :\r\n      this._adapter.addCalendarYears(this._activeDate, -1);\r\n  }\r\n\r\n  /** Handles user clicks on the next button. */\r\n  _nextClicked(): void {\r\n    this._activeDate = this._currentView === \"month\" ?\r\n      this._adapter.addCalendarMonths(this._activeDate, 1) :\r\n      this._adapter.addCalendarYears(this._activeDate, 1);\r\n  }\r\n\r\n  /** Whether the previous period button is enabled. */\r\n  _previousEnabled(): boolean {\r\n    if (!this.minDate) {\r\n      return true;\r\n    }\r\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\r\n  }\r\n\r\n  /** Whether the next period button is enabled. */\r\n  _nextEnabled(): boolean {\r\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n    if (this._currentView === \"month\") {\r\n      this._handleCalendarBodyKeydownInMonthView(event);\r\n    } else if (this._currentView === \"year\") {\r\n      this._handleCalendarBodyKeydownInYearView(event);\r\n    } else {\r\n      this._handleCalendarBodyKeydownInClockView(event);\r\n    }\r\n  }\r\n\r\n  _focusActiveCell() {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._ngZone.onStable.asObservable().pipe(first()).subscribe(() => {\r\n        this._elementRef.nativeElement.focus();\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\r\n  private _isSameView(date1: D, date2: D): boolean {\r\n    return this._currentView === \"month\" ?\r\n      this._adapter.getYear(date1) == this._adapter.getYear(date2) &&\r\n      this._adapter.getMonth(date1) == this._adapter.getMonth(date2) :\r\n      this._adapter.getYear(date1) == this._adapter.getYear(date2);\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in month view. */\r\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._adapter.addCalendarDays(this._activeDate, -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._adapter.addCalendarDays(this._activeDate, 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._adapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._adapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._adapter.addCalendarDays(this._activeDate,\r\n          1 - this._adapter.getDate(this._activeDate));\r\n        break;\r\n      case END:\r\n        this._activeDate = this._adapter.addCalendarDays(this._activeDate,\r\n          (this._adapter.getNumDaysInMonth(this._activeDate) -\r\n            this._adapter.getDate(this._activeDate)));\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate = event.altKey ?\r\n          this._adapter.addCalendarYears(this._activeDate, -1) :\r\n          this._adapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate = event.altKey ?\r\n          this._adapter.addCalendarYears(this._activeDate, 1) :\r\n          this._adapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n        if (this._dateFilterForViews(this._activeDate)) {\r\n          this._dateSelected(this._activeDate);\r\n          // Prevent unexpected default actions such as form submission.\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in year view. */\r\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = this._adapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = this._adapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = this._adapter.addCalendarMonths(this._activeDate,\r\n          -this._adapter.getMonth(this._activeDate));\r\n        break;\r\n      case END:\r\n        this._activeDate = this._adapter.addCalendarMonths(this._activeDate,\r\n          11 - this._adapter.getMonth(this._activeDate));\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate =\r\n          this._adapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate =\r\n          this._adapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\r\n        break;\r\n      case ENTER:\r\n        this._monthSelected(this._activeDate);\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in month view. */\r\n  private _handleCalendarBodyKeydownInClockView(event: KeyboardEvent): void {\r\n    switch (event.keyCode) {\r\n      case UP_ARROW:\r\n        this._activeDate = this._clockView == \"hour\" ?\r\n          this._adapter.addCalendarHours(this._activeDate, 1) :\r\n          this._adapter.addCalendarMinutes(this._activeDate, 1);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = this._clockView == \"hour\" ?\r\n          this._adapter.addCalendarHours(this._activeDate, -1) :\r\n          this._adapter.addCalendarMinutes(this._activeDate, -1);\r\n        break;\r\n      case ENTER:\r\n        this._timeSelected(this._activeDate);\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Determine the date for the month that comes before the given month in the same column in the\r\n   * calendar table.\r\n   */\r\n  private _prevMonthInSameCol(date: D): D {\r\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\r\n    // of each year.\r\n    const increment = this._adapter.getMonth(date) <= 4 ? -5 :\r\n      (this._adapter.getMonth(date) >= 7 ? -7 : -12);\r\n    return this._adapter.addCalendarMonths(date, increment);\r\n  }\r\n\r\n  /**\r\n   * Determine the date for the month that comes after the given month in the same column in the\r\n   * calendar table.\r\n   */\r\n  private _nextMonthInSameCol(date: D): D {\r\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\r\n    // of each year.\r\n    const increment = this._adapter.getMonth(date) <= 4 ? 7 :\r\n      (this._adapter.getMonth(date) >= 7 ? 5 : 12);\r\n    return this._adapter.addCalendarMonths(date, increment);\r\n  }\r\n\r\n  private calendarState(direction: string): void {\r\n    this._calendarState = direction;\r\n  }\r\n\r\n  _calendarStateDone() {\r\n    this._calendarState = \"\";\r\n  }\r\n\r\n  private _2digit(n: number) {\r\n    return (\"00\" + n).slice(-2);\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from \"@angular/core\";\r\n\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nexport class MatDatetimepickerCalendarCell {\r\n  constructor(public value: number,\r\n              public displayValue: string,\r\n              public ariaLabel: string,\r\n              public enabled: boolean) {\r\n  }\r\n}\r\n\r\n/**\r\n * An internal component used to display calendar data in a table.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: \"[mat-datetimepicker-calendar-body]\",\r\n  template: `<!--\r\n  If there's not enough space in the first row, create a separate label row. We mark this row as\r\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\r\n-->\r\n<tr *ngIf=\"_firstRowOffset < labelMinRequiredCells\" aria-hidden=\"true\">\r\n  <td class=\"mat-datetimepicker-calendar-body-label\" [attr.colspan]=\"numCols\" >{{ label }}</td>\r\n</tr>\r\n\r\n<!-- Create the first row separately so we can include a special spacer cell. -->\r\n<tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\">\r\n  <!--\r\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\r\n  -->\r\n  <td *ngIf=\"rowIndex === 0 && _firstRowOffset\"\r\n      aria-hidden=\"true\"\r\n      class=\"mat-datetimepicker-calendar-body-label\"\r\n      [attr.colspan]=\"_firstRowOffset\">\r\n    {{ _firstRowOffset >= labelMinRequiredCells ? label : '' }}\r\n  </td>\r\n  <td *ngFor=\"let item of row; let colIndex = index\"\r\n      role=\"gridcell\"\r\n      class=\"mat-datetimepicker-calendar-body-cell\"\r\n      [class.mat-datetimepicker-calendar-body-disabled]=\"!item.enabled\"\r\n      [class.mat-datetimepicker-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\"\r\n      [attr.aria-label]=\"item.ariaLabel\"\r\n      [attr.aria-disabled]=\"!item.enabled || null\"\r\n      (click)=\"_cellClicked(item)\">\r\n    <div class=\"mat-datetimepicker-calendar-body-cell-content\"\r\n         [class.mat-datetimepicker-calendar-body-selected]=\"selectedValue === item.value\"\r\n         [class.mat-datetimepicker-calendar-body-today]=\"todayValue === item.value\">\r\n      {{ item.displayValue }}\r\n    </div>\r\n  </td>\r\n</tr>\r\n`,\r\n  styles: [`.mat-datetimepicker-calendar-body{font-size:13px;min-width:224px}.mat-datetimepicker-calendar-body-label{padding:7.14286% 0 7.14286% 7.14286%;height:0;line-height:0;color:rgba(0,0,0,.54);-webkit-transform:translateX(-6px);transform:translateX(-6px);text-align:left}.mat-datetimepicker-calendar-body-cell{position:relative;width:14.28571%;height:0;line-height:0;padding:7.14286% 0;text-align:center;outline:0;cursor:pointer}.mat-datetimepicker-calendar-body-disabled{cursor:default;pointer-events:none}.mat-datetimepicker-calendar-body-cell-content{position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;color:rgba(0,0,0,.87);border:1px solid transparent;border-radius:50%}.mat-datetimepicker-calendar-body-disabled>.mat-datetimepicker-calendar-body-cell-content:not(.mat-datetimepicker-calendar-body-selected){color:rgba(0,0,0,.38)}.mat-calendar:focus .mat-datetimepicker-calendar-body-active>.mat-datetimepicker-calendar-body-cell-content:not(.mat-datetimepicker-calendar-body-selected),:not(.mat-datetimepicker-calendar-body-disabled):hover>.mat-datetimepicker-calendar-body-cell-content:not(.mat-datetimepicker-calendar-body-selected){background-color:rgba(0,0,0,.12)}.mat-datetimepicker-calendar-body-disabled>.mat-datetimepicker-calendar-body-today:not(.mat-datetimepicker-calendar-body-selected){border-color:rgba(0,0,0,.18)}[dir=rtl] .mat-datetimepicker-calendar-body-label{padding:0 7.14286% 0 0;-webkit-transform:translateX(6px);transform:translateX(6px);text-align:right}`],\r\n  host: {\r\n    \"class\": \"mat-datetimepicker-calendar-body\"\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatDatetimepickerCalendarBody {\r\n  /** The label for the table. (e.g. \"Jan 2017\"). */\r\n  @Input() label: string;\r\n\r\n  /** The cells to display in the table. */\r\n  @Input() rows: MatDatetimepickerCalendarCell[][];\r\n\r\n  /** The value in the table that corresponds to today. */\r\n  @Input() todayValue: number;\r\n\r\n  /** The value in the table that is currently selected. */\r\n  @Input() selectedValue: number;\r\n\r\n  /** The minimum number of free cells needed to fit the label in the first row. */\r\n  @Input() labelMinRequiredCells: number;\r\n\r\n  /** The number of columns in the table. */\r\n  @Input() numCols = 7;\r\n\r\n  /** Whether to allow selection of disabled cells. */\r\n  @Input() allowDisabledSelection = false;\r\n\r\n  /** The cell number of the active cell in the table. */\r\n  @Input() activeCell = 0;\r\n\r\n  /** Emits when a new value is selected. */\r\n  @Output() selectedValueChange = new EventEmitter<number>();\r\n\r\n  _cellClicked(cell: MatDatetimepickerCalendarCell): void {\r\n    if (!this.allowDisabledSelection && !cell.enabled) {\r\n      return;\r\n    }\r\n    this.selectedValueChange.emit(cell.value);\r\n  }\r\n\r\n  /** The number of blank cells to put at the beginning for the first row. */\r\n  get _firstRowOffset(): number {\r\n    return this.rows && this.rows.length && this.rows[0].length ?\r\n      this.numCols - this.rows[0].length : 0;\r\n  }\r\n\r\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber === this.activeCell;\r\n  }\r\n}\r\n","/* tslint:disable */\r\nimport {\r\n  AfterContentInit,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output\r\n} from \"@angular/core\";\r\nimport { DatetimeAdapter } from \"../adapter/datetime-adapter\";\r\nimport { MatDatetimepickerFilterType } from \"./datetimepicker-filtertype\";\r\n\r\nexport const CLOCK_RADIUS = 50;\r\nexport const CLOCK_INNER_RADIUS = 27.5;\r\nexport const CLOCK_OUTER_RADIUS = 41.25;\r\nexport const CLOCK_TICK_RADIUS = 7.0833;\r\n\r\nexport type ClockView = \"hour\" | \"minute\";\r\n\r\n/**\r\n * A clock that is used as part of the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: \"mat-datetimepicker-clock\",\r\n  template: `<div class=\"mat-datetimepicker-clock\">\r\n  <div class=\"mat-datetimepicker-clock-center\"></div>\r\n  <div class=\"mat-datetimepicker-clock-hand\" [ngStyle]=\"_hand\"></div>\r\n  <div class=\"mat-datetimepicker-clock-hours\" [class.active]=\"_hourView\">\r\n    <div *ngFor=\"let item of _hours\"\r\n         class=\"mat-datetimepicker-clock-cell\"\r\n         [class.mat-datetimepicker-clock-cell-selected]=\"_selectedHour == item.value\"\r\n         [class.mat-datetimepicker-clock-cell-disabled]=\"!item.enabled\"\r\n         [style.top]=\"item.top+'%'\"\r\n         [style.left]=\"item.left+'%'\"\r\n         [style.fontSize]=\"item.fontSize\">{{ item.displayValue }}</div>\r\n  </div>\r\n  <div class=\"mat-datetimepicker-clock-minutes\" [class.active]=\"!_hourView\">\r\n    <div *ngFor=\"let item of _minutes\"\r\n         class=\"mat-datetimepicker-clock-cell\"\r\n         [class.mat-datetimepicker-clock-cell-selected]=\"_selectedMinute == item.value\"\r\n         [class.mat-datetimepicker-clock-cell-disabled]=\"!item.enabled\"\r\n         [style.top]=\"item.top+'%'\"\r\n         [style.left]=\"item.left+'%'\">{{ item.displayValue }}</div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`:host{position:relative;display:block;min-width:224px;margin:8px;font-size:14px;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.mat-datetimepicker-clock{position:relative;width:100%;height:0;padding-top:100%;background-color:#e0e0e0;border-radius:50%}.mat-datetimepicker-clock-center{position:absolute;top:50%;left:50%;width:2%;height:2%;margin:-1%;border-radius:50%}.mat-datetimepicker-clock-hand{position:absolute;top:0;right:0;bottom:0;left:0;width:1px;margin:0 auto;-webkit-transform-origin:bottom;transform-origin:bottom}.mat-datetimepicker-clock-hand::before{content:'';position:absolute;top:-4px;left:-4px;width:8px;height:8px;border-radius:50%}.mat-datetimepicker-clock-hours,.mat-datetimepicker-clock-minutes{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;visibility:hidden;transition:350ms;-webkit-transform:scale(1.2);transform:scale(1.2)}.mat-datetimepicker-clock-hours.active,.mat-datetimepicker-clock-minutes.active{opacity:1;visibility:visible;-webkit-transform:scale(1);transform:scale(1)}.mat-datetimepicker-clock-minutes{-webkit-transform:scale(.8);transform:scale(.8)}.mat-datetimepicker-clock-cell{position:absolute;display:flex;width:14.1666%;height:14.1666%;color:rgba(0,0,0,.87);justify-content:center;box-sizing:border-box;border-radius:50%;align-items:center;cursor:pointer}.mat-datetimepicker-clock-cell:not(.mat-datetimepicker-clock-cell-selected):not(.mat-datetimepicker-clock-cell-disabled):hover{background-color:rgba(0,0,0,.1)}.mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-disabled{color:rgba(0,0,0,.38);pointer-events:none}.mat-datetimepicker-clock-cell.mat-datetimepicker-clock-cell-selected{color:#fff}`],\r\n  host: {\r\n    \"role\": \"clock\",\r\n    \"(mousedown)\": \"_handleMousedown($event)\"\r\n  }\r\n})\r\nexport class MatDatetimepickerClock<D> implements AfterContentInit {\r\n\r\n  @Output() _userSelection = new EventEmitter<void>();\r\n\r\n  /**\r\n   * The date to display in this clock view.\r\n   */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    this._activeDate = this._adapter.clampDate(value, this.minDate, this.maxDate);\r\n    if (!this._adapter.sameMinute(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D | null {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(value: D | null) {\r\n    this._selected = this._adapter.getValidDateOrNull(this._adapter.deserialize(value));\r\n    if (this._selected) {\r\n      this.activeDate = this._selected;\r\n    }\r\n  }\r\n\r\n  private _selected: D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._adapter.getValidDateOrNull(this._adapter.deserialize(value));\r\n  }\r\n\r\n  private _minDate: D | null;\r\n\r\n  private _timeChanged = false;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._adapter.getValidDateOrNull(this._adapter.deserialize(value));\r\n  }\r\n\r\n  private _maxDate: D | null;\r\n\r\n  /** Whether the clock should be started in hour or minute view. */\r\n  @Input()\r\n  set startView(value: ClockView) {\r\n    this._hourView = value != \"minute\";\r\n  }\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D, type: MatDatetimepickerFilterType) => boolean;\r\n\r\n  @Input() interval: number = 1;\r\n\r\n  @Input() twelvehour: boolean = false;\r\n\r\n  /** Emits when the currently selected date changes. */\r\n  @Output() selectedChange = new EventEmitter<D>();\r\n\r\n  @Output() activeDateChange = new EventEmitter<D>();\r\n\r\n  /** Hours and Minutes representing the clock view. */\r\n  _hours: Array<Object> = [];\r\n  _minutes: Array<Object> = [];\r\n\r\n  /** Whether the clock is in hour view. */\r\n  _hourView: boolean = true;\r\n\r\n  _selectedHour: number;\r\n  _selectedMinute: number;\r\n\r\n  get _hand(): any {\r\n    this._selectedHour = this._adapter.getHour(this.activeDate);\r\n    this._selectedMinute = this._adapter.getMinute(this.activeDate);\r\n    let deg = 0;\r\n    let radius = CLOCK_OUTER_RADIUS;\r\n    if (this._hourView) {\r\n      let outer = this._selectedHour > 0 && this._selectedHour < 13;\r\n      radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;\r\n      if (this.twelvehour) {\r\n        radius = CLOCK_OUTER_RADIUS;\r\n      }\r\n      deg = Math.round(this._selectedHour * (360 / (24 / 2)));\r\n    } else {\r\n      deg = Math.round(this._selectedMinute * (360 / 60));\r\n    }\r\n    return {\r\n      \"transform\": `rotate(${deg}deg)`,\r\n      \"height\": `${radius}%`,\r\n      \"margin-top\": `${50 - radius}%`\r\n    };\r\n  }\r\n\r\n  private mouseMoveListener: any;\r\n  private mouseUpListener: any;\r\n\r\n  constructor(private _element: ElementRef,\r\n              private _adapter: DatetimeAdapter<D>) {\r\n    this.mouseMoveListener = (event: any) => {\r\n      this._handleMousemove(event);\r\n    };\r\n    this.mouseUpListener = () => {\r\n      this._handleMouseup();\r\n    };\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.activeDate = this._activeDate || this._adapter.today();\r\n    this._init();\r\n  }\r\n\r\n  /** Handles mousedown events on the clock body. */\r\n  _handleMousedown(event: any) {\r\n    this._timeChanged = false;\r\n    this.setTime(event);\r\n    document.addEventListener(\"mousemove\", this.mouseMoveListener);\r\n    document.addEventListener(\"touchmove\", this.mouseMoveListener);\r\n    document.addEventListener(\"mouseup\", this.mouseUpListener);\r\n    document.addEventListener(\"touchend\", this.mouseUpListener);\r\n  }\r\n\r\n  _handleMousemove(event: any) {\r\n    event.preventDefault();\r\n    this.setTime(event);\r\n  }\r\n\r\n  _handleMouseup() {\r\n    document.removeEventListener(\"mousemove\", this.mouseMoveListener);\r\n    document.removeEventListener(\"touchmove\", this.mouseMoveListener);\r\n    document.removeEventListener(\"mouseup\", this.mouseUpListener);\r\n    document.removeEventListener(\"touchend\", this.mouseUpListener);\r\n    if (this._timeChanged) {\r\n      this.selectedChange.emit(this.activeDate);\r\n    }\r\n  }\r\n\r\n  /** Initializes this clock view. */\r\n  private _init() {\r\n    this._hours.length = 0;\r\n    this._minutes.length = 0;\r\n\r\n    let hourNames = this._adapter.getHourNames();\r\n    let minuteNames = this._adapter.getMinuteNames();\r\n\r\n    if (this.twelvehour) {\r\n      for (let i = 1; i < (hourNames.length / 2) + 1; i++) {\r\n        let radian = i / 6 * Math.PI;\r\n        let radius = CLOCK_OUTER_RADIUS;\r\n        const date = this._adapter.createDatetime(\r\n          this._adapter.getYear(this.activeDate),\r\n          this._adapter.getMonth(this.activeDate),\r\n          this._adapter.getDate(this.activeDate), i + 1, 0);\r\n        let enabled =\r\n          (!this.minDate || this._adapter.compareDatetime(date, this.minDate) >= 0) &&\r\n          (!this.maxDate || this._adapter.compareDatetime(date, this.maxDate) <= 0);\r\n        this._hours.push({\r\n          value: i,\r\n          displayValue: i === 0 ? \"00\" : hourNames[i],\r\n          enabled: enabled,\r\n          top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,\r\n          left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS\r\n        });\r\n      }\r\n    } else {\r\n      for (let i = 0; i < hourNames.length; i++) {\r\n        let radian = i / 6 * Math.PI;\r\n        let outer = i > 0 && i < 13,\r\n          radius = outer ? CLOCK_OUTER_RADIUS : CLOCK_INNER_RADIUS;\r\n        const date = this._adapter.createDatetime(\r\n          this._adapter.getYear(this.activeDate),\r\n          this._adapter.getMonth(this.activeDate),\r\n          this._adapter.getDate(this.activeDate), i, 0);\r\n        let enabled =\r\n          (!this.minDate || this._adapter.compareDatetime(date, this.minDate) >= 0) &&\r\n          (!this.maxDate || this._adapter.compareDatetime(date, this.maxDate) <= 0) &&\r\n          (!this.dateFilter || this.dateFilter(date, MatDatetimepickerFilterType.HOUR));\r\n        this._hours.push({\r\n          value: i,\r\n          displayValue: i === 0 ? \"00\" : hourNames[i],\r\n          enabled: enabled,\r\n          top: CLOCK_RADIUS - Math.cos(radian) * radius - CLOCK_TICK_RADIUS,\r\n          left: CLOCK_RADIUS + Math.sin(radian) * radius - CLOCK_TICK_RADIUS,\r\n          fontSize: i > 0 && i < 13 ? \"\" : \"80%\"\r\n        });\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < minuteNames.length; i += 5) {\r\n      let radian = i / 30 * Math.PI;\r\n      const date = this._adapter.createDatetime(\r\n        this._adapter.getYear(this.activeDate),\r\n        this._adapter.getMonth(this.activeDate),\r\n        this._adapter.getDate(this.activeDate), this._adapter.getHour(this.activeDate), i);\r\n      let enabled =\r\n        (!this.minDate || this._adapter.compareDatetime(date, this.minDate) >= 0) &&\r\n        (!this.maxDate || this._adapter.compareDatetime(date, this.maxDate) <= 0) &&\r\n        (!this.dateFilter || this.dateFilter(date, MatDatetimepickerFilterType.MINUTE));\r\n      this._minutes.push({\r\n        value: i,\r\n        displayValue: i === 0 ? \"00\" : minuteNames[i],\r\n        enabled: enabled,\r\n        top: CLOCK_RADIUS - Math.cos(radian) * CLOCK_OUTER_RADIUS - CLOCK_TICK_RADIUS,\r\n        left: CLOCK_RADIUS + Math.sin(radian) * CLOCK_OUTER_RADIUS - CLOCK_TICK_RADIUS\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set Time\r\n   * @param event\r\n   */\r\n  private setTime(event: any) {\r\n    let trigger = this._element.nativeElement;\r\n    let triggerRect = trigger.getBoundingClientRect();\r\n    let width = trigger.offsetWidth;\r\n    let height = trigger.offsetHeight;\r\n    let pageX = event.pageX !== undefined ? event.pageX : event.touches[0].pageX;\r\n    let pageY = event.pageY !== undefined ? event.pageY : event.touches[0].pageY;\r\n    let x = (width / 2) - (pageX - triggerRect.left - window.pageXOffset);\r\n    let y = (height / 2) - (pageY - triggerRect.top - window.pageYOffset);\r\n    let radian = Math.atan2(-x, y);\r\n    let unit = Math.PI / (this._hourView ? 6 : (this.interval ? (30 / this.interval) : 30));\r\n    let z = Math.sqrt(x * x + y * y);\r\n    let outer = this._hourView && z > ((width * (CLOCK_OUTER_RADIUS / 100)) +\r\n      (width * (CLOCK_INNER_RADIUS / 100))) / 2;\r\n\r\n    if (radian < 0) {\r\n      radian = Math.PI * 2 + radian;\r\n    }\r\n    let value = Math.round(radian / unit);\r\n\r\n    let date;\r\n    if (this._hourView) {\r\n      if (this.twelvehour) {\r\n        value = value === 0 ? 12 : value;\r\n      } else {\r\n        if (value === 12) {\r\n          value = 0;\r\n        }\r\n        value = outer ? (value === 0 ? 12 : value) : value === 0 ? 0 : value + 12;\r\n      }\r\n      date = this._adapter.createDatetime(\r\n        this._adapter.getYear(this.activeDate),\r\n        this._adapter.getMonth(this.activeDate),\r\n        this._adapter.getDate(this.activeDate), value, this._adapter.getMinute(this.activeDate));\r\n    } else {\r\n      if (this.interval) {\r\n        value *= this.interval;\r\n      }\r\n      if (value === 60) {\r\n        value = 0;\r\n      }\r\n      date = this._adapter.createDatetime(\r\n        this._adapter.getYear(this.activeDate),\r\n        this._adapter.getMonth(this.activeDate),\r\n        this._adapter.getDate(this.activeDate), this._adapter.getHour(this.activeDate), value);\r\n    }\r\n\r\n    const clamped = this._adapter.clampDate(date, this.minDate, this.maxDate);\r\n    if (date === clamped) {\r\n      this._timeChanged = true;\r\n      this.activeDate = clamped;\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n  }\r\n}\r\n","import { Directionality } from \"@angular/cdk/bidi\";\r\nimport { coerceBooleanProperty } from \"@angular/cdk/coercion\";\r\nimport { ESCAPE } from \"@angular/cdk/keycodes\";\r\nimport {\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  PositionStrategy\r\n} from \"@angular/cdk/overlay\";\r\nimport { ComponentPortal } from \"@angular/cdk/portal\";\r\nimport { DOCUMENT } from \"@angular/common\";\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation\r\n} from \"@angular/core\";\r\nimport { MAT_DATEPICKER_SCROLL_STRATEGY } from \"@angular/material\";\r\nimport {\r\n  MatDialog,\r\n  MatDialogRef\r\n} from \"@angular/material/dialog\";\r\nimport { Subject, Subscription } from \"rxjs\";\r\nimport { first } from \"rxjs/operators\";\r\nimport { DatetimeAdapter } from \"../adapter/datetime-adapter\";\r\nimport { MatDatetimepickerCalendar } from \"./calendar\";\r\nimport { createMissingDateImplError } from \"./datetimepicker-errors\";\r\nimport { MatDatetimepickerFilterType } from \"./datetimepicker-filtertype\";\r\nimport { MatDatetimepickerInput } from \"./datetimepicker-input\";\r\n\r\n/** Used to generate a unique ID for each datepicker instance. */\r\nlet datetimepickerUid = 0;\r\n\r\n/**\r\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\r\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the popup that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: \"mat-datetimepicker-content\",\r\n  template: `<mat-datetimepicker-calendar class=\"mat-typography\" cdkTrapFocus\r\n              [id]=\"datetimepicker.id\"\r\n              [attr.mode]=\"datetimepicker.mode\"\r\n              [startView]=\"datetimepicker.startView\"\r\n              [type]=\"datetimepicker.type\"\r\n              [timeInterval]=\"datetimepicker.timeInterval\"\r\n              [minDate]=\"datetimepicker._minDate\"\r\n              [maxDate]=\"datetimepicker._maxDate\"\r\n              [dateFilter]=\"datetimepicker._dateFilter\"\r\n              [selected]=\"datetimepicker._selected\"\r\n              [startAt]=\"datetimepicker.startAt\"\r\n              [confirmButtonLabel]=\"datetimepicker.confirmButtonLabel\"\r\n              [cancelButtonLabel]=\"datetimepicker.cancelButtonLabel\"\r\n              (selectedChange)=\"datetimepicker._select($event)\"\r\n              (_userSelection)=\"datetimepicker.close()\">\r\n</mat-datetimepicker-calendar>\r\n`,\r\n  styles: [`.mat-datetimepicker-content{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);display:block;background-color:#fff;border-radius:2px;overflow:hidden}.mat-datetimepicker-calendar{width:296px;height:auto}.mat-datetimepicker-calendar[mode=landscape]{width:446px;height:auto}@media (min-width:480px){.mat-datetimepicker-calendar[mode=auto]{width:446px;height:auto}}.mat-datetimepicker-content-touch{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12);display:block;box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12)}.cdk-global-overlay-wrapper,.cdk-overlay-container{pointer-events:none;top:0;left:0;height:100%;width:100%}.cdk-overlay-container{position:fixed;z-index:1000}.cdk-global-overlay-wrapper{display:flex;position:absolute;z-index:1000}.cdk-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box;z-index:1000}.cdk-overlay-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;pointer-events:auto;transition:opacity .4s cubic-bezier(.25,.8,.25,1);opacity:0}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:.48}.cdk-overlay-dark-backdrop{background:rgba(0,0,0,.6)}.mat-datetimepicker-dialog .mat-dialog-container{padding:0}`],\r\n  host: {\r\n    \"class\": \"mat-datetimepicker-content\",\r\n    \"[class.mat-datetimepicker-content-touch]\": \"datetimepicker?.touchUi\",\r\n    \"(keydown)\": \"_handleKeydown($event)\"\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatDatetimepickerContent<D> implements AfterContentInit {\r\n  datetimepicker: MatDatetimepicker<D>;\r\n\r\n  @ViewChild(MatDatetimepickerCalendar) _calendar: MatDatetimepickerCalendar<D>;\r\n\r\n  ngAfterContentInit() {\r\n    this._calendar._focusActiveCell();\r\n  }\r\n\r\n  /**\r\n   * Handles keydown event on datepicker content.\r\n   * @param event The event.\r\n   */\r\n  _handleKeydown(event: KeyboardEvent): void {\r\n    if (event.keyCode === ESCAPE) {\r\n      this.datetimepicker.close();\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: \"mat-datetimepicker\",\r\n  exportAs: \"matDatetimepicker\",\r\n  template: \"\",\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false\r\n})\r\nexport class MatDatetimepicker<D> implements OnDestroy {\r\n  /** The date to open the calendar to initially. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\r\n  }\r\n\r\n  set startAt(date: D | null) {\r\n    this._startAt = this._dateAdapter.getValidDateOrNull(date);\r\n  }\r\n\r\n  private _startAt: D | null;\r\n\r\n  /** The view that the calendar should start in. */\r\n  @Input() startView: \"clock\" | \"month\" | \"year\" = \"month\";\r\n  @Input() mode: \"auto\" | \"portrait\" | \"landscape\" = \"auto\";\r\n  @Input() timeInterval: number = 1;\r\n\r\n  @Input()\r\n  get openOnFocus(): boolean { return this._openOnFocus; }\r\n  set openOnFocus(value: boolean) { this._openOnFocus = coerceBooleanProperty(value); }\r\n  private _openOnFocus: boolean;\r\n\r\n  _handleFocus() {\r\n    if (!this.opened && this.openOnFocus) {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  get type() {\r\n    return this._type;\r\n  }\r\n\r\n  set type(value: \"date\" | \"time\" | \"month\" | \"datetime\") {\r\n    this._type = value || \"date\";\r\n  }\r\n\r\n  private _type: \"date\" | \"time\" | \"month\" | \"datetime\" = \"date\";\r\n\r\n  /**\r\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n   * than a popup and elements have more padding to allow for bigger touch targets.\r\n   */\r\n  @Input()\r\n  get touchUi(): boolean {\r\n    return this._touchUi;\r\n  }\r\n\r\n  set touchUi(value: boolean) {\r\n    this._touchUi = coerceBooleanProperty(value);\r\n  }\r\n\r\n  private _touchUi = false;\r\n\r\n  /** Whether the datepicker pop-up should be disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined && this._datepickerInput ?\r\n      this._datepickerInput.disabled : !!this._disabled;\r\n  }\r\n\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.next(newValue);\r\n    }\r\n  }\r\n\r\n  private _disabled: boolean;\r\n\r\n  /**\r\n   * Emits new selected date when selected date changes.\r\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\r\n   */\r\n  @Output() selectedChanged = new EventEmitter<D>();\r\n\r\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\r\n  @Input() panelClass: string | string[];\r\n\r\n  @Input() confirmButtonLabel = 'Confirm';\r\n  @Input() cancelButtonLabel = 'Cancel';\r\n\r\n  /** Emits when the datepicker has been opened. */\r\n  @Output(\"opened\") openedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when the datepicker has been closed. */\r\n  @Output(\"closed\") closedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Whether the calendar is open. */\r\n  opened = false;\r\n\r\n  /** The id for the datepicker calendar. */\r\n  id = `mat-datetimepicker-${datetimepickerUid++}`;\r\n\r\n  /** The currently selected date. */\r\n  get _selected(): D | null {\r\n    return this._validSelected;\r\n  }\r\n\r\n  set _selected(value: D | null) {\r\n    this._validSelected = value;\r\n  }\r\n\r\n  private _validSelected: D | null = null;\r\n\r\n  /** The minimum selectable date. */\r\n  get _minDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.min;\r\n  }\r\n\r\n  /** The maximum selectable date. */\r\n  get _maxDate(): D | null {\r\n    return this._datepickerInput && this._datepickerInput.max;\r\n  }\r\n\r\n  get _dateFilter(): (date: D | null, type: MatDatetimepickerFilterType) => boolean {\r\n    return this._datepickerInput && this._datepickerInput._dateFilter;\r\n  }\r\n\r\n  /** A reference to the overlay when the calendar is opened as a popup. */\r\n  private _popupRef: OverlayRef;\r\n\r\n  /** A reference to the dialog when the calendar is opened as a dialog. */\r\n  private _dialogRef: MatDialogRef<any> | null;\r\n\r\n  /** A portal containing the calendar for this datepicker. */\r\n  private _calendarPortal: ComponentPortal<MatDatetimepickerContent<D>>;\r\n\r\n  /** The element that was focused before the datepicker was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  private _inputSubscription = Subscription.EMPTY;\r\n\r\n  /** The input element this datepicker is associated with. */\r\n  _datepickerInput: MatDatetimepickerInput<D>;\r\n\r\n  /** Emits when the datepicker is disabled. */\r\n  _disabledChange = new Subject<boolean>();\r\n\r\n  constructor(private _dialog: MatDialog,\r\n              private _overlay: Overlay,\r\n              private _ngZone: NgZone,\r\n              private _viewContainerRef: ViewContainerRef,\r\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\r\n              @Optional() private _dateAdapter: DatetimeAdapter<D>,\r\n              @Optional() private _dir: Directionality,\r\n              @Optional() @Inject(DOCUMENT) private _document: any) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError(\"DateAdapter\");\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n    }\r\n  }\r\n\r\n  /** Selects the given date */\r\n  _select(date: D): void {\r\n    const oldValue = this._selected;\r\n    this._selected = date;\r\n    if (!this._dateAdapter.sameDatetime(oldValue, this._selected)) {\r\n      // tslint:disable-next-line deprecation\r\n      this.selectedChanged.emit(date);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register an input with this datepicker.\r\n   * @param input The datepicker input to register with this datepicker.\r\n   */\r\n  _registerInput(input: MatDatetimepickerInput<D>): void {\r\n    if (this._datepickerInput) {\r\n      throw Error(\"A MatDatepicker can only be associated with a single input.\");\r\n    }\r\n    this._datepickerInput = input;\r\n    this._inputSubscription =\r\n      this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\r\n  }\r\n\r\n  /** Open the calendar. */\r\n  open(): void {\r\n    if (this.opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._datepickerInput) {\r\n      throw Error(\"Attempted to open an MatDatepicker with no associated input.\");\r\n    }\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this.opened = true;\r\n    this.openedStream.emit();\r\n  }\r\n\r\n  /** Close the calendar. */\r\n  close(): void {\r\n    if (!this.opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\r\n      this._calendarPortal.detach();\r\n    }\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this.opened) {\r\n        this.opened = false;\r\n        this.closedStream.emit();\r\n        this._focusedElementBeforeOpen = null;\r\n      }\r\n    };\r\n\r\n    if (this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === \"function\") {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n      // able to close the calendar at all. We work around it by making the logic, that marks\r\n      // the datepicker as closed, async as well.\r\n      this._focusedElementBeforeOpen.focus();\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Open the calendar as a dialog. */\r\n  private _openAsDialog(): void {\r\n    this._dialogRef = this._dialog.open(MatDatetimepickerContent, {\r\n      direction: this._dir ? this._dir.value : \"ltr\",\r\n      viewContainerRef: this._viewContainerRef,\r\n      panelClass: \"mat-datetimepicker-dialog\"\r\n    });\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.datetimepicker = this;\r\n  }\r\n\r\n  /** Open the calendar as a popup. */\r\n  private _openAsPopup(): void {\r\n    if (!this._calendarPortal) {\r\n      this._calendarPortal = new ComponentPortal<MatDatetimepickerContent<D>>(MatDatetimepickerContent, this._viewContainerRef);\r\n    }\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      const componentRef: ComponentRef<MatDatetimepickerContent<D>> =\r\n        this._popupRef.attach(this._calendarPortal);\r\n      componentRef.instance.datetimepicker = this;\r\n\r\n      // Update the position once the calendar has rendered.\r\n      this._ngZone.onStable.asObservable().pipe(first()).subscribe(() => {\r\n        this._popupRef.updatePosition();\r\n      });\r\n    }\r\n\r\n    this._popupRef.backdropClick().subscribe(() => this.close());\r\n  }\r\n\r\n  /** Create the popup. */\r\n  private _createPopup(): void {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: true,\r\n      backdropClass: \"mat-overlay-transparent-backdrop\",\r\n      direction: this._dir ? this._dir.value : \"ltr\",\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: \"mat-datetimepicker-popup\"\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayConfig);\r\n  }\r\n\r\n  /** Create the popup PositionStrategy. */\r\n  private _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay.position()\r\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\r\n        {originX: \"start\", originY: \"bottom\"},\r\n        {overlayX: \"start\", overlayY: \"top\"}\r\n      )\r\n      .withFallbackPosition(\r\n        {originX: \"start\", originY: \"top\"},\r\n        {overlayX: \"start\", overlayY: \"bottom\"}\r\n      )\r\n      .withFallbackPosition(\r\n        {originX: \"end\", originY: \"bottom\"},\r\n        {overlayX: \"end\", overlayY: \"top\"}\r\n      )\r\n      .withFallbackPosition(\r\n        {originX: \"end\", originY: \"top\"},\r\n        {overlayX: \"end\", overlayY: \"bottom\"}\r\n      );\r\n  }\r\n}\r\n","import { coerceBooleanProperty } from \"@angular/cdk/coercion\";\r\nimport { DOWN_ARROW } from \"@angular/cdk/keycodes\";\r\nimport {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output\r\n} from \"@angular/core\";\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators\r\n} from \"@angular/forms\";\r\nimport { MAT_INPUT_VALUE_ACCESSOR } from \"@angular/material\";\r\nimport { MatFormField } from \"@angular/material/form-field\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { DatetimeAdapter } from \"../adapter/datetime-adapter\";\r\nimport {\r\n  MAT_DATETIME_FORMATS,\r\n  MatDatetimeFormats\r\n} from \"../adapter/datetime-formats\";\r\nimport { MatDatetimepicker } from \"./datetimepicker\";\r\nimport { createMissingDateImplError } from \"./datetimepicker-errors\";\r\nimport { MatDatetimepickerFilterType } from \"./datetimepicker-filtertype\";\r\n\r\n// tslint:disable no-use-before-declare\r\n\r\nexport const MAT_DATETIMEPICKER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => MatDatetimepickerInput),\r\n  multi: true\r\n};\r\n\r\nexport const MAT_DATETIMEPICKER_VALIDATORS: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => MatDatetimepickerInput),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\r\n */\r\nexport class MatDatetimepickerInputEvent<D> {\r\n  /** The new value for the target datepicker input. */\r\n  value: D | null;\r\n\r\n  constructor(public target: MatDatetimepickerInput<D>, public targetElement: HTMLElement) {\r\n    this.value = this.target.value;\r\n  }\r\n}\r\n\r\n/** Directive used to connect an input to a MatDatepicker. */\r\n@Directive({\r\n  selector: \"input[matDatetimepicker]\",\r\n  providers: [\r\n    MAT_DATETIMEPICKER_VALUE_ACCESSOR,\r\n    MAT_DATETIMEPICKER_VALIDATORS,\r\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatetimepickerInput},\r\n  ],\r\n  host: {\r\n    \"[attr.aria-haspopup]\": \"true\",\r\n    \"[attr.aria-owns]\": \"(_datepicker?.opened && _datepicker.id) || null\",\r\n    \"[attr.min]\": \"min ? _dateAdapter.toIso8601(min) : null\",\r\n    \"[attr.max]\": \"max ? _dateAdapter.toIso8601(max) : null\",\r\n    \"[disabled]\": \"disabled\",\r\n    \"(focus)\": \"_datepicker._handleFocus()\",\r\n    \"(input)\": \"_onInput($event.target.value)\",\r\n    \"(change)\": \"_onChange()\",\r\n    \"(blur)\": \"_onBlur()\",\r\n    \"(keydown)\": \"_onKeydown($event)\"\r\n  },\r\n  exportAs: \"matDatepickerInput\"\r\n})\r\nexport class MatDatetimepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\r\n  Validator {\r\n  /** The datepicker that this input is associated with. */\r\n  @Input()\r\n  set matDatetimepicker(value: MatDatetimepicker<D>) {\r\n    this.registerDatepicker(value);\r\n  }\r\n\r\n  _datepicker: MatDatetimepicker<D>;\r\n\r\n  private registerDatepicker(value: MatDatetimepicker<D>) {\r\n    if (value) {\r\n      this._datepicker = value;\r\n      this._datepicker._registerInput(this);\r\n    }\r\n  }\r\n\r\n  @Input() set matDatepickerFilter(filter: (date: D | null, type: MatDatetimepickerFilterType) => boolean) {\r\n    this._dateFilter = filter;\r\n    this._validatorOnChange();\r\n  }\r\n\r\n  _dateFilter: (date: D | null, type: MatDatetimepickerFilterType) => boolean;\r\n\r\n  /** The value of the input. */\r\n  @Input()\r\n  get value(): D | null {\r\n    return this._value;\r\n  }\r\n\r\n  set value(value: D | null) {\r\n    value = this._dateAdapter.deserialize(value);\r\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\r\n    value = this._dateAdapter.getValidDateOrNull(value);\r\n    const oldDate = this.value;\r\n    this._value = value;\r\n    this._formatValue(value);\r\n\r\n    // use timeout to ensure the datetimepicker is instantiated and we get the correct format\r\n    setTimeout(() => {\r\n      if (!this._dateAdapter.sameDatetime(oldDate, value)) {\r\n        this._valueChange.emit(value);\r\n      }\r\n    });\r\n  }\r\n\r\n  private getDisplayFormat() {\r\n    switch (this._datepicker.type) {\r\n      case \"date\":\r\n        return this._dateFormats.display.dateInput;\r\n      case \"datetime\":\r\n        return this._dateFormats.display.datetimeInput;\r\n      case \"time\":\r\n        return this._dateFormats.display.timeInput;\r\n      case \"month\":\r\n        return this._dateFormats.display.monthInput;\r\n    }\r\n  }\r\n\r\n  private getParseFormat() {\r\n    let parseFormat;\r\n\r\n    switch (this._datepicker.type) {\r\n      case \"date\":\r\n        parseFormat = this._dateFormats.parse.dateInput;\r\n        break;\r\n      case \"datetime\":\r\n        parseFormat = this._dateFormats.parse.datetimeInput;\r\n        break;\r\n      case \"time\":\r\n        parseFormat = this._dateFormats.parse.timeInput;\r\n        break;\r\n      case \"month\":\r\n        parseFormat = this._dateFormats.parse.monthInput;\r\n        break;\r\n    }\r\n    if (!parseFormat) {\r\n      parseFormat = this._dateFormats.parse.dateInput;\r\n    }\r\n\r\n    return parseFormat;\r\n  }\r\n\r\n  private _value: D | null;\r\n\r\n  /** The minimum valid date. */\r\n  @Input()\r\n  get min(): D | null {\r\n    return this._min;\r\n  }\r\n\r\n  set min(value: D | null) {\r\n    this._min = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._validatorOnChange();\r\n  }\r\n\r\n  private _min: D | null;\r\n\r\n  /** The maximum valid date. */\r\n  @Input()\r\n  get max(): D | null {\r\n    return this._max;\r\n  }\r\n\r\n  set max(value: D | null) {\r\n    this._max = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    this._validatorOnChange();\r\n  }\r\n\r\n  private _max: D | null;\r\n\r\n  /** Whether the datepicker-input is disabled. */\r\n  @Input()\r\n  get disabled() {\r\n    return !!this._disabled;\r\n  }\r\n\r\n  set disabled(value: any) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (this._disabled !== newValue) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.emit(newValue);\r\n    }\r\n  }\r\n\r\n  private _disabled: boolean;\r\n\r\n  /** Emits when a `change` event is fired on this `<input>`. */\r\n  @Output() dateChange = new EventEmitter<MatDatetimepickerInputEvent<D>>();\r\n\r\n  /** Emits when an `input` event is fired on this `<input>`. */\r\n  @Output() dateInput = new EventEmitter<MatDatetimepickerInputEvent<D>>();\r\n\r\n  /** Emits when the value changes (either due to user input or programmatic change). */\r\n  _valueChange = new EventEmitter<D | null>();\r\n\r\n  /** Emits when the disabled state has changed */\r\n  _disabledChange = new EventEmitter<boolean>();\r\n\r\n  _onTouched = () => {\r\n  }\r\n\r\n  private _cvaOnChange: (value: any) => void = () => {\r\n  }\r\n\r\n  private _validatorOnChange = () => {\r\n  }\r\n\r\n  private _datepickerSubscription = Subscription.EMPTY;\r\n\r\n  private _localeSubscription = Subscription.EMPTY;\r\n\r\n  /** The form control validator for whether the input parses. */\r\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n    return this._lastValueValid ?\r\n      null : {\"matDatepickerParse\": {\"text\": this._elementRef.nativeElement.value}};\r\n  }\r\n\r\n  /** The form control validator for the min date. */\r\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return (!this.min || !controlValue ||\r\n      this._dateAdapter.compareDatetime(this.min, controlValue) <= 0) ?\r\n      null : {\"matDatepickerMin\": {\"min\": this.min, \"actual\": controlValue}};\r\n  }\r\n\r\n  /** The form control validator for the max date. */\r\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return (!this.max || !controlValue ||\r\n      this._dateAdapter.compareDatetime(this.max, controlValue) >= 0) ?\r\n      null : {\"matDatepickerMax\": {\"max\": this.max, \"actual\": controlValue}};\r\n  }\r\n\r\n  /** The form control validator for the date filter. */\r\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue, MatDatetimepickerFilterType.DATE) ?\r\n      null : {\"matDatepickerFilter\": true};\r\n  }\r\n\r\n  /** The combined form control validator for this input. */\r\n  private _validator: ValidatorFn | null =\r\n    Validators.compose(\r\n      [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\r\n\r\n  /** Whether the last value set on the input was valid. */\r\n  private _lastValueValid = false;\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              @Optional() public _dateAdapter: DatetimeAdapter<D>,\r\n              @Optional() @Inject(MAT_DATETIME_FORMATS) private _dateFormats: MatDatetimeFormats,\r\n              @Optional() private _formField: MatFormField) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError(\"DatetimeAdapter\");\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError(\"MAT_DATETIME_FORMATS\");\r\n    }\r\n\r\n    // Update the displayed date when the locale changes.\r\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n      this.value = this.value;\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    if (this._datepicker) {\r\n      // tslint:disable-next-line deprecation\r\n      this._datepickerSubscription = this._datepicker.selectedChanged.subscribe((selected: D) => {\r\n          this.value = selected;\r\n          this._cvaOnChange(selected);\r\n          this._onTouched();\r\n          this.dateInput.emit(new MatDatetimepickerInputEvent(this, this._elementRef.nativeElement));\r\n          this.dateChange.emit(new MatDatetimepickerInputEvent(this, this._elementRef.nativeElement));\r\n        });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._datepickerSubscription.unsubscribe();\r\n    this._localeSubscription.unsubscribe();\r\n    this._valueChange.complete();\r\n    this._disabledChange.complete();\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this._validatorOnChange = fn;\r\n  }\r\n\r\n  validate(c: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(c) : null;\r\n  }\r\n\r\n  /**\r\n   * Gets the element that the datepicker popup should be connected to.\r\n   * @return The element to connect the popup to.\r\n   */\r\n  getPopupConnectionElementRef(): ElementRef {\r\n    return this._formField ? this._formField.underlineRef : this._elementRef;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  writeValue(value: D): void {\r\n    this.value = value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._cvaOnChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  setDisabledState(disabled: boolean): void {\r\n    this.disabled = disabled;\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\r\n      this._datepicker.open();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  _onInput(value: string) {\r\n    let date = this._dateAdapter.parse(value, this.getParseFormat());\r\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\r\n    date = this._dateAdapter.getValidDateOrNull(date);\r\n    this._value = date;\r\n    this._cvaOnChange(date);\r\n    this._valueChange.emit(date);\r\n    this.dateInput.emit(new MatDatetimepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\r\n\r\n  _onChange() {\r\n    this.dateChange.emit(new MatDatetimepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\r\n\r\n  /** Handles blur events on the input. */\r\n  _onBlur() {\r\n    // Reformat the input only if we have a valid value.\r\n    if (this.value) {\r\n      this._formatValue(this.value);\r\n    }\r\n\r\n    this._onTouched();\r\n  }\r\n\r\n   /** Formats a value and sets it on the input element. */\r\n   private _formatValue(value: D | null) {\r\n     this._elementRef.nativeElement.value =\r\n       value ? this._dateAdapter.format(value, this.getDisplayFormat()) : \"\";\r\n   }\r\n}\r\n","import { coerceBooleanProperty } from \"@angular/cdk/coercion\";\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from \"@angular/core\";\r\nimport { MatDatepickerIntl } from \"@angular/material\";\r\nimport { merge, of as observableOf, Subscription } from \"rxjs\";\r\nimport { MatDatetimepicker } from \"./datetimepicker\";\r\n\r\n@Component({\r\n  selector: \"mat-datetimepicker-toggle\",\r\n  template: `<button mat-icon-button type=\"button\" [attr.aria-label]=\"_intl.openCalendarLabel\"\r\n        [disabled]=\"disabled\" (click)=\"_open($event)\">\r\n  <mat-icon [ngSwitch]=\"datetimepicker.type\">\r\n    <svg *ngSwitchCase=\"'time'\" viewBox=\"0 0 24 24\" width=\"100%\" height=\"100%\" fill=\"currentColor\"\r\n            style=\"vertical-align: top\" focusable=\"false\">\r\n      <path d=\"M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z\"></path>\r\n    </svg>\r\n    <svg *ngSwitchCase=\"'datetime'\" viewBox=\"0 0 24 24\" width=\"100%\" height=\"100%\" fill=\"currentColor\"\r\n            style=\"vertical-align: top\" focusable=\"false\">\r\n      <path d=\"M15,13H16.5V15.82L18.94,17.23L18.19,18.53L15,16.69V13M19,8H5V19H9.67C9.24,18.09 9,17.07 9,16A7,7 0 0,1 16,9C17.07,9 18.09,9.24 19,9.67V8M5,21C3.89,21 3,20.1 3,19V5C3,3.89 3.89,3 5,3H6V1H8V3H16V1H18V3H19A2,2 0 0,1 21,5V11.1C22.24,12.36 23,14.09 23,16A7,7 0 0,1 16,23C14.09,23 12.36,22.24 11.1,21H5M16,11.15A4.85,4.85 0 0,0 11.15,16C11.15,18.68 13.32,20.85 16,20.85A4.85,4.85 0 0,0 20.85,16C20.85,13.32 18.68,11.15 16,11.15Z\"></path>\r\n    </svg>\r\n    <svg *ngSwitchDefault viewBox=\"0 0 24 24\" width=\"100%\" height=\"100%\" fill=\"currentColor\"\r\n        style=\"vertical-align: top\" focusable=\"false\">\r\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n      <path d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"/>\r\n    </svg>\r\n  </mat-icon>\r\n</button>\r\n`,\r\n  host: {\r\n    \"class\": \"mat-datetimepicker-toggle\"\r\n  },\r\n  exportAs: \"matDatetimepickerToggle\",\r\n  encapsulation: ViewEncapsulation.None,\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatDatetimepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\r\n  private _stateChanges = Subscription.EMPTY;\r\n\r\n  /** Datepicker instance that the button will toggle. */\r\n  @Input(\"for\") datetimepicker: MatDatetimepicker<D>;\r\n\r\n  /** Whether the toggle button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined ? this.datetimepicker.disabled : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.datepicker) {\r\n      this._watchStateChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._watchStateChanges();\r\n  }\r\n\r\n  _open(event: Event): void {\r\n    if (this.datetimepicker && !this.disabled) {\r\n      this.datetimepicker.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _watchStateChanges() {\r\n    const datepickerDisabled = this.datetimepicker ? this.datetimepicker._disabledChange : observableOf();\r\n    const inputDisabled = this.datetimepicker && this.datetimepicker._datepickerInput ?\r\n        this.datetimepicker._datepickerInput._disabledChange : observableOf();\r\n\r\n    this._stateChanges.unsubscribe();\r\n    this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\r\n        .subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n}\r\n","/* tslint:disable */\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation\r\n} from \"@angular/core\";\r\nimport {\r\n  MAT_DATETIME_FORMATS,\r\n  MatDatetimeFormats\r\n} from \"../adapter/datetime-formats\";\r\nimport {\r\n  DatetimeAdapter\r\n} from \"../adapter/datetime-adapter\";\r\nimport { MatDatetimepickerCalendarCell } from \"./calendar-body\";\r\nimport { slideCalendar } from \"./datetimepicker-animations\";\r\nimport { createMissingDateImplError } from \"./datetimepicker-errors\";\r\n\r\nconst DAYS_PER_WEEK = 7;\r\n\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: \"mat-datetimepicker-month-view\",\r\n  template: `<table class=\"mat-datetimepicker-calendar-table\">\r\n  <thead class=\"mat-datetimepicker-calendar-table-header\">\r\n    <tr><th *ngFor=\"let day of _weekdays\" [attr.aria-label]=\"day.long\">{{day.narrow}}</th></tr>\r\n  </thead>\r\n  <tbody [@slideCalendar]=\"_calendarState\"\r\n         (@slideCalendar.done)=\"_calendarStateDone()\"\r\n         mat-datetimepicker-calendar-body\r\n         role=\"grid\"\r\n         [rows]=\"_weeks\"\r\n         [todayValue]=\"_todayDate\"\r\n         [selectedValue]=\"_selectedDate\"\r\n         [activeCell]=\"_adapter.getDate(activeDate) - 1\"\r\n         (selectedValueChange)=\"_dateSelected($event)\"></tbody>\r\n</table>\r\n`,\r\n  animations: [slideCalendar],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatDatetimepickerMonthView<D> implements AfterContentInit {\r\n\r\n  @Input() type: \"date\" | \"time\" | \"month\" | \"datetime\" = \"date\";\r\n\r\n  @Output() _userSelection = new EventEmitter<void>();\r\n\r\n  /**\r\n   * The date to display in this month view (everything other than the month and year is ignored).\r\n   */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    this._activeDate = value || this._adapter.today();\r\n    if (oldActiveDate && this._activeDate &&\r\n      !this._adapter.sameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n      if (this._adapter.isInNextMonth(oldActiveDate, this._activeDate)) {\r\n        this.calendarState(\"right\");\r\n      } else {\r\n        this.calendarState(\"left\");\r\n      }\r\n    }\r\n  }\r\n\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(value: D) {\r\n    this._selected = value;\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n  }\r\n\r\n  private _selected: D;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new date is selected. */\r\n  @Output() selectedChange = new EventEmitter<D>();\r\n\r\n  /** Grid of calendar cells representing the dates of the month. */\r\n  _weeks: MatDatetimepickerCalendarCell[][];\r\n\r\n  /** The number of blank cells in the first row before the 1st of the month. */\r\n  _firstWeekOffset: number;\r\n\r\n  /**\r\n   * The date of the month that the currently selected Date falls on.\r\n   * Null if the currently selected Date is in another month.\r\n   */\r\n  _selectedDate: number;\r\n\r\n  /** The date of the month that today falls on. Null if today is in another month. */\r\n  _todayDate: number;\r\n\r\n  /** The names of the weekdays. */\r\n  _weekdays: { long: string, narrow: string }[];\r\n\r\n  _calendarState: string;\r\n\r\n  constructor(@Optional() public _adapter: DatetimeAdapter<D>,\r\n              @Optional() @Inject(MAT_DATETIME_FORMATS) private _dateFormats: MatDatetimeFormats) {\r\n    if (!this._adapter) {\r\n      throw createMissingDateImplError(\"DatetimeAdapter\");\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError(\"MAT_DATETIME_FORMATS\");\r\n    }\r\n\r\n    const firstDayOfWeek = this._adapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._adapter.getDayOfWeekNames(\"narrow\");\r\n    const longWeekdays = this._adapter.getDayOfWeekNames(\"long\");\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    let weekdays = longWeekdays.map((long, i) => {\r\n      return {long, narrow: narrowWeekdays[i]};\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n\r\n    this._activeDate = this._adapter.today();\r\n  }\r\n\r\n  ngAfterContentInit(): void {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new date is selected. */\r\n  _dateSelected(date: number) {\r\n    const userSelected = this._adapter.createDatetime(\r\n      this._adapter.getYear(this.activeDate), this._adapter.getMonth(this.activeDate),\r\n      date, this._adapter.getHour(this.activeDate),\r\n      this._adapter.getMinute(this.activeDate));\r\n\r\n    this.selected = userSelected;\r\n    this.selectedChange.emit(userSelected);\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  private _init() {\r\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\r\n    this._todayDate = this._getDateInCurrentMonth(this._adapter.today());\r\n\r\n    let firstOfMonth = this._adapter.createDatetime(this._adapter.getYear(this.activeDate),\r\n      this._adapter.getMonth(this.activeDate), 1,\r\n      this._adapter.getHour(this.activeDate),\r\n      this._adapter.getMinute(this.activeDate));\r\n    this._firstWeekOffset =\r\n      (DAYS_PER_WEEK + this._adapter.getDayOfWeek(firstOfMonth) -\r\n        this._adapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\r\n\r\n    this._createWeekCells();\r\n  }\r\n\r\n  /** Creates MdCalendarCells for the dates in this month. */\r\n  private _createWeekCells() {\r\n    let daysInMonth = this._adapter.getNumDaysInMonth(this.activeDate);\r\n    let dateNames = this._adapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++ , cell++) {\r\n      if (cell == DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      let date = this._adapter.createDatetime(\r\n        this._adapter.getYear(this.activeDate),\r\n        this._adapter.getMonth(this.activeDate), i + 1,\r\n        this._adapter.getHour(this.activeDate),\r\n        this._adapter.getMinute(this.activeDate));\r\n      let enabled = !this.dateFilter ||\r\n        this.dateFilter(date);\r\n      let ariaLabel = this._adapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      this._weeks[this._weeks.length - 1]\r\n        .push(new MatDatetimepickerCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the date in this month that the given Date falls on.\r\n   * Returns null if the given Date is in another month.\r\n   */\r\n  private _getDateInCurrentMonth(date: D): number {\r\n    return this._adapter.sameMonthAndYear(date, this.activeDate) ?\r\n      this._adapter.getDate(date) : null;\r\n  }\r\n\r\n  private calendarState(direction: string): void {\r\n    this._calendarState = direction;\r\n  }\r\n\r\n  _calendarStateDone() {\r\n    this._calendarState = \"\";\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  ViewEncapsulation\r\n} from \"@angular/core\";\r\nimport { createMissingDateImplError } from \"./datetimepicker-errors\";\r\nimport { MatDatetimepickerCalendarCell } from \"./calendar-body\";\r\nimport { slideCalendar } from \"./datetimepicker-animations\";\r\nimport {\r\n  MAT_DATETIME_FORMATS,\r\n  MatDatetimeFormats\r\n} from \"../adapter/datetime-formats\";\r\nimport {\r\n  DatetimeAdapter\r\n} from \"../adapter/datetime-adapter\";\r\n\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: \"mat-datetimepicker-year-view\",\r\n  template: `<table class=\"mat-datetimepicker-calendar-table\">\r\n  <thead class=\"mat-datetimepicker-calendar-table-header\"></thead>\r\n  <tbody [@slideCalendar]=\"_calendarState\"\r\n         (@slideCalendar.done)=\"_calendarStateDone()\"\r\n         mat-datetimepicker-calendar-body\r\n         role=\"grid\"\r\n         allowDisabledSelection=\"true\"\r\n         [label]=\"_yearLabel\"\r\n         [rows]=\"_months\"\r\n         [todayValue]=\"_todayMonth\"\r\n         [selectedValue]=\"_selectedMonth\"\r\n         [labelMinRequiredCells]=\"2\"\r\n         [activeCell]=\"_adapter.getMonth(activeDate)\"\r\n         (selectedValueChange)=\"_monthSelected($event)\"></tbody>\r\n</table>\r\n`,\r\n  animations: [slideCalendar],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MatDatetimepickerYearView<D> implements AfterContentInit {\r\n\r\n  @Output() _userSelection = new EventEmitter<void>();\r\n\r\n  @Input() type: \"date\" | \"time\" | \"month\" | \"datetime\" = \"date\";\r\n\r\n  /** The date to display in this year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    this._activeDate = value || this._adapter.today();\r\n    if (oldActiveDate && this._activeDate &&\r\n      !this._adapter.sameYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n      // if (oldActiveDate < this._activeDate) {\r\n      //  this.calendarState('right');\r\n      // } else {\r\n      //  this.calendarState('left');\r\n      // }\r\n    }\r\n  }\r\n\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): D {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(value: D) {\r\n    this._selected = value;\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n  }\r\n\r\n  private _selected: D;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() selectedChange = new EventEmitter<D>();\r\n\r\n  /** Grid of calendar cells representing the months of the year. */\r\n  _months: MatDatetimepickerCalendarCell[][];\r\n\r\n  /** The label for this year (e.g. \"2017\"). */\r\n  _yearLabel: string;\r\n\r\n  /** The month in this year that today falls on. Null if today is in a different year. */\r\n  _todayMonth: number;\r\n\r\n  /**\r\n   * The month in this year that the selected Date falls on.\r\n   * Null if the selected Date is in a different year.\r\n   */\r\n  _selectedMonth: number;\r\n\r\n  _calendarState: string;\r\n\r\n  constructor(@Optional() public _adapter: DatetimeAdapter<D>,\r\n              @Optional() @Inject(MAT_DATETIME_FORMATS) private _dateFormats: MatDatetimeFormats) {\r\n    if (!this._adapter) {\r\n      throw createMissingDateImplError(\"DatetimeAdapter\");\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError(\"MAT_DATETIME_FORMATS\");\r\n    }\r\n\r\n    this._activeDate = this._adapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._init();\r\n  }\r\n\r\n  /** Handles when a new month is selected. */\r\n  _monthSelected(month: number) {\r\n    const userSelected = this._adapter.createDatetime(\r\n      this._adapter.getYear(this.activeDate), month,\r\n      this._adapter.getDate(this.activeDate),\r\n      this._adapter.getHour(this.activeDate),\r\n      this._adapter.getMinute(this.activeDate));\r\n\r\n    this.selectedChange.emit(userSelected);\r\n    this.selected = userSelected;\r\n    this._selectedMonth = month;\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  private _init() {\r\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._adapter.today());\r\n    this._yearLabel = this._adapter.getYearName(this.activeDate);\r\n\r\n    let monthNames = this._adapter.getMonthNames(\"short\");\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9, 10, 11]].map(row => row.map(\r\n      month => this._createCellForMonth(month, monthNames[month])));\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getMonthInCurrentYear(date: D) {\r\n    return this._adapter.sameYear(date, this.activeDate) ?\r\n      this._adapter.getMonth(date) : null;\r\n  }\r\n\r\n  /** Creates an MdCalendarCell for the given month. */\r\n  private _createCellForMonth(month: number, monthName: string) {\r\n    let ariaLabel = this._adapter.format(\r\n      this._adapter.createDatetime(this._adapter.getYear(this.activeDate), month, 1,\r\n        this._adapter.getHour(this.activeDate),\r\n        this._adapter.getMinute(this.activeDate)),\r\n      this._dateFormats.display.monthYearA11yLabel);\r\n    return new MatDatetimepickerCalendarCell(\r\n      month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\r\n  }\r\n\r\n  /** Whether the given month is enabled. */\r\n  private _isMonthEnabled(month: number) {\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    let firstOfMonth = this._adapter.createDatetime(\r\n      this._adapter.getYear(this.activeDate), month, 1,\r\n      this._adapter.getHour(this.activeDate),\r\n      this._adapter.getMinute(this.activeDate));\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (let date = firstOfMonth; this._adapter.getMonth(date) == month;\r\n         date = this._adapter.addCalendarDays(date, 1)) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // private calendarState(direction: string): void {\r\n  //   this._calendarState = direction;\r\n  // }\r\n\r\n  _calendarStateDone() {\r\n    this._calendarState = \"\";\r\n  }\r\n}\r\n","import { A11yModule } from \"@angular/cdk/a11y\";\r\nimport { OverlayModule } from \"@angular/cdk/overlay\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport {\r\n  MatButtonModule,\r\n  MatDialogModule,\r\n  MatIconModule\r\n} from \"@angular/material\";\r\nimport { MatDatetimepickerCalendar } from \"./calendar\";\r\nimport { MatDatetimepickerCalendarBody } from \"./calendar-body\";\r\nimport { MatDatetimepickerClock } from \"./clock\";\r\nimport {\r\n  MatDatetimepicker,\r\n  MatDatetimepickerContent\r\n} from \"./datetimepicker\";\r\nimport { MatDatetimepickerInput } from \"./datetimepicker-input\";\r\nimport { MatDatetimepickerToggle } from \"./datetimepicker-toggle\";\r\nimport { MatDatetimepickerMonthView } from \"./month-view\";\r\nimport { MatDatetimepickerYearView } from \"./year-view\";\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n    MatIconModule,\r\n    OverlayModule,\r\n    A11yModule\r\n  ],\r\n  entryComponents: [\r\n    MatDatetimepickerContent\r\n  ],\r\n  declarations: [\r\n    MatDatetimepickerCalendar,\r\n    MatDatetimepickerCalendarBody,\r\n    MatDatetimepickerClock,\r\n    MatDatetimepicker,\r\n    MatDatetimepickerToggle,\r\n    MatDatetimepickerInput,\r\n    MatDatetimepickerContent,\r\n    MatDatetimepickerMonthView,\r\n    MatDatetimepickerYearView\r\n  ],\r\n  exports: [\r\n    MatDatetimepickerCalendar,\r\n    MatDatetimepickerCalendarBody,\r\n    MatDatetimepickerClock,\r\n    MatDatetimepicker,\r\n    MatDatetimepickerToggle,\r\n    MatDatetimepickerInput,\r\n    MatDatetimepickerContent,\r\n    MatDatetimepickerMonthView,\r\n    MatDatetimepickerYearView\r\n  ]\r\n})\r\nexport class MatDatetimepickerModule {\r\n}\r\n"],"names":["first","style","DateAdapter","trigger","observableOf"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA,qBAAyC,SAAQ,WAAc;;;;IAE7D,YAAsB,SAAyB;QAC7C,KAAK,EAAE,CAAC;QADY,cAAS,GAAT,SAAS,CAAgB;KAE9C;;;;;IAoBD,kBAAkB,CAAC,GAAQ;QACzB,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC;KACrE;;;;;;IAED,eAAe,CAACA,QAAQ,EAAE,MAAS;QACjC,OAAO,IAAI,CAAC,WAAW,CAACA,QAAK,EAAE,MAAM,CAAC;YACpC,IAAI,CAAC,OAAO,CAACA,QAAK,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YAC1C,IAAI,CAAC,SAAS,CAACA,QAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;KAClD;;;;;;IAED,YAAY,CAACA,QAAe,EAAE,MAAgB;QAC5C,IAAIA,QAAK,IAAI,MAAM,EAAE;;kBACb,UAAU,GAAG,IAAI,CAAC,OAAO,CAACA,QAAK,CAAC;;kBAChC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YACxC,IAAI,UAAU,IAAI,WAAW,EAAE;gBAC7B,OAAO,CAAC,IAAI,CAAC,eAAe,CAACA,QAAK,EAAE,MAAM,CAAC,CAAC;aAC7C;YACD,OAAO,UAAU,KAAK,WAAW,CAAC;SACnC;QACD,OAAOA,QAAK,KAAK,MAAM,CAAC;KACzB;;;;;;IAED,QAAQ,CAACA,QAAQ,EAAE,MAAS;QAC1B,OAAOA,QAAK,IAAI,MAAM,IAAI,IAAI,CAAC,OAAO,CAACA,QAAK,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KACxE;;;;;;IAED,OAAO,CAACA,QAAQ,EAAE,MAAS;QACzB,OAAOA,QAAK,IAAI,MAAM,IAAI,IAAI,CAAC,OAAO,CAACA,QAAK,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAACA,QAAK,EAAE,MAAM,CAAC,CAAC;KAChH;;;;;;IAED,QAAQ,CAACA,QAAQ,EAAE,MAAS;QAC1B,OAAOA,QAAK,IAAI,MAAM,IAAI,IAAI,CAAC,OAAO,CAACA,QAAK,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,OAAO,CAACA,QAAK,EAAE,MAAM,CAAC,CAAC;KACvG;;;;;;IAED,UAAU,CAACA,QAAQ,EAAE,MAAS;QAC5B,OAAOA,QAAK,IAAI,MAAM,IAAI,IAAI,CAAC,SAAS,CAACA,QAAK,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,QAAQ,CAACA,QAAK,EAAE,MAAM,CAAC,CAAC;KAC5G;;;;;;IAED,gBAAgB,CAACA,QAAe,EAAE,MAAgB;QAChD,IAAIA,QAAK,IAAI,MAAM,EAAE;;kBACb,UAAU,GAAG,IAAI,CAAC,OAAO,CAACA,QAAK,CAAC;;kBAChC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YACxC,IAAI,UAAU,IAAI,WAAW,EAAE;gBAC7B,OAAO,EAAE,IAAI,CAAC,OAAO,CAACA,QAAK,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;oBACjD,IAAI,CAAC,QAAQ,CAACA,QAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;aACjD;YACD,OAAO,UAAU,KAAK,WAAW,CAAC;SACnC;QACD,OAAOA,QAAK,KAAK,MAAM,CAAC;KACzB;;;;;;IAGD,KAAK,CAAC,IAAO;QACX,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KACnC;;;;;;IAED,gBAAgB,CAAC,IAAO,EAAE,KAAa;QACrC,OAAO,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;KACrD;;;;;;IAED,iBAAiB,CAAC,IAAO,EAAE,MAAc;QACvC,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KACvD;;;;;;IAED,eAAe,CAAC,IAAO,EAAE,IAAY;QACnC,OAAO,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACnD;;;;;IAED,OAAO,CAAC,IAAO;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KACrC;;;;;IAED,QAAQ,CAAC,IAAO;QACd,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACtC;;;;;IAED,OAAO,CAAC,IAAO;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KACrC;;;;;IAED,YAAY,CAAC,IAAO;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;KAC1C;;;;;IAED,aAAa,CAACC,QAAK;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAACA,QAAK,CAAC,CAAC;KAC5C;;;;IAED,YAAY;QACV,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;KACtC;;;;;IAED,iBAAiB,CAACA,QAAK;QACrB,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAACA,QAAK,CAAC,CAAC;KAChD;;;;;IAED,WAAW,CAAC,IAAO;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KACzC;;;;IAED,iBAAiB;QACf,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;KAC3C;;;;;IAED,iBAAiB,CAAC,IAAO;QACvB,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;KAC/C;;;;;;;IAED,UAAU,CAAC,IAAY,EAAE,KAAa,EAAE,IAAY;QAClD,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;KACrD;;;;IAED,KAAK;QACH,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;KAC/B;;;;;;IAED,KAAK,CAAC,KAAU,EAAE,WAAgB;QAChC,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;KACjD;;;;;;IAED,MAAM,CAAC,IAAO,EAAE,aAAkB;QAChC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;KACnD;;;;;IAED,SAAS,CAAC,IAAO;QACf,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KACvC;;;;;IAED,cAAc,CAAC,GAAQ;QACrB,OAAO,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;KAC3C;;;;;IAED,OAAO,CAAC,IAAO;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KACrC;;;;IAED,OAAO;QACL,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;KACjC;;;;;;;IAED,SAAS,CAAC,IAAO,EAAE,GAAc,EAAE,GAAc;QAC/C,IAAI,GAAG,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE;YAC9C,OAAO,GAAG,CAAC;SACZ;QACD,IAAI,GAAG,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE;YAC9C,OAAO,GAAG,CAAC;SACZ;QACD,OAAO,IAAI,CAAC;KACb;CACF;;;;;;AC/KD;AAqBA,MAAa,oBAAoB,GAAG,IAAI,cAAc,CAAqB,sBAAsB,CAAC;;;;;;ACrBlG,WAYqC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC;;;;;MAA7C,kBAAkB,GAAG,KAAK,CAAC,EAAE,KAAiB;WAGb,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC;;;;;MAA/C,oBAAoB,GAAG,KAAK,CAAC,EAAE,KAAiB;;;;;;;AAEtD,eAAkB,MAAc,EAAE,aAAmC;;UAC7D,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;IACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/B,WAAW,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;KACnC;IACD,OAAO,WAAW,CAAC;CACpB;AAGD,2BAAmC,SAAQ,eAAqB;;;;;IAE9D,YAAiD,aAAqB,EAAE,SAA4B;QAClG,KAAK,CAAC,SAAS,CAAC,CAAC;QACjB,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;KAC/B;;;;;IAED,KAAK,CAAC,IAAU;QACd,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;KACnI;;;;;IAED,OAAO,CAAC,IAAU;QAChB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;KACxB;;;;;IAED,SAAS,CAAC,IAAU;QAClB,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;KAC1B;;;;;;IAED,aAAa,CAAC,SAAe,EAAE,OAAa;;cACpC,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC;QACpD,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;KAClD;;;;;;;;;IAED,cAAc,CAAC,IAAY,EAAE,KAAa,EAAE,IAAY,EAAE,IAAY,EAAE,MAAc;;;QAGpF,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,EAAE,EAAE;YAC3B,MAAM,KAAK,CAAC,wBAAwB,KAAK,4CAA4C,CAAC,CAAC;SACxF;QAED,IAAI,IAAI,GAAG,CAAC,EAAE;YACZ,MAAM,KAAK,CAAC,iBAAiB,IAAI,mCAAmC,CAAC,CAAC;SACvE;QAED,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,EAAE,EAAE;YACzB,MAAM,KAAK,CAAC,iBAAiB,IAAI,qCAAqC,CAAC,CAAC;SACzE;QAED,IAAI,MAAM,GAAG,CAAC,IAAI,MAAM,GAAG,EAAE,EAAE;YAC7B,MAAM,KAAK,CAAC,mBAAmB,MAAM,uCAAuC,CAAC,CAAC;SAC/E;;cAEK,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC;;QAG5E,IAAI,MAAM,CAAC,QAAQ,EAAE,KAAK,KAAK,EAAE;YAC/B,MAAM,KAAK,CAAC,iBAAiB,IAAI,2BAA2B,KAAK,IAAI,CAAC,CAAC;SACxE;QAED,OAAO,MAAM,CAAC;KACf;;;;;IAEO,kBAAkB,CAAC,IAAU;QACnC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,EACxD,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;KACvC;;;;;IAED,mBAAmB,CAAC,IAAU;;cACtB,MAAM,GAAG,IAAI,IAAI,EAAE;QACzB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;QAC3D,OAAO,MAAM,CAAC;KACf;;;;IAED,YAAY;QACV,OAAO,kBAAkB,CAAC;KAC3B;;;;IAED,cAAc;QACZ,OAAO,oBAAoB,CAAC;KAC7B;;;;;;IAED,gBAAgB,CAAC,IAAU,EAAE,KAAa;QACxC,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE,CAAC,CAAC;KACjD;;;;;;IAED,iBAAiB,CAAC,IAAU,EAAE,MAAc;;YACtC,OAAO,GAAG,IAAI,CAAC,uBAAuB,CACtC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;;;;;QAMnH,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,MAAM,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;YAC9E,OAAO,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;SACpI;QAED,OAAO,OAAO,CAAC;KAChB;;;;;;IAED,eAAe,CAAC,IAAU,EAAE,IAAY;QACtC,OAAO,IAAI,CAAC,uBAAuB,CAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;KACnH;;;;;;IAED,gBAAgB,CAAC,IAAU,EAAE,KAAa;QACxC,OAAO,IAAI,CAAC,uBAAuB,CACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAC3D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;KACrD;;;;;;IAED,kBAAkB,CAAC,IAAU,EAAE,OAAe;QAC5C,OAAO,IAAI,CAAC,uBAAuB,CACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAC3D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC;KACvD;;;;;IAED,SAAS,CAAC,IAAU;QAClB,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG;YACnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YAChC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;SACnC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACb;;;;;;;;IASO,8BAA8B,CAAC,GAAW;QAChD,OAAO,GAAG,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;KAC3C;;;;;;IAOO,OAAO,CAAC,CAAS;QACvB,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KAC7B;;;;;;;;;;IAGO,uBAAuB,CAAC,IAAY,EAAE,KAAa,EAAE,IAAY,EACzC,KAAa,EAAE,OAAe;;cACtD,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC;;;QAI1D,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,GAAG,GAAG,EAAE;YAC3B,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;SACjD;QACD,OAAO,MAAM,CAAC;KACf;;;YAnJF,UAAU;;;yCAGI,QAAQ,YAAI,MAAM,SAAC,eAAe;YAtB/CC,aAAW;;;;;;;;ACJb,MAAa,2BAA2B,GAAuB;IAC7D,KAAK,EAAE,EAAE;IACT,OAAO,EAAE;QACP,SAAS,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAC;QAC9D,UAAU,EAAE,EAAC,KAAK,EAAE,MAAM,EAAC;QAC3B,aAAa,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAC;QACtG,SAAS,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAC;QAC/C,cAAc,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAC;QACjD,aAAa,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAC;QAC/D,kBAAkB,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAC;QACpD,oBAAoB,EAAE,EAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,SAAS,EAAC;KACzE;CACF;;;;;;ACdD;AAoBA;;;YATC,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,gBAAgB,CAAC;gBAC3B,SAAS,EAAE;oBACT;wBACE,OAAO,EAAE,eAAe;wBACxB,QAAQ,EAAE,qBAAqB;qBAChC;iBACF;aACF;;aASuD,2BAA2B;AAEnF;;;YAPC,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,oBAAoB;oBACpB,mBAAmB;iBACpB;gBACD,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,oBAAoB,EAAE,QAAQ,MAA6B,EAAC,CAAC;aACpF;;;;;;;;;;;;AC7BD;;;;;;AAeA,MAAa,aAAa,GAA6B,OAAO,CAAC,eAAe,EAAE;IAC9E,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC;IACrC,UAAU,CAAC,iBAAiB,EAAE;QAC5B,KAAK,CAAC,EAAC,OAAO,EAAE,CAAC,EAAC,CAAC;QACnB,OAAO,CAAC,8CAA8C,CAAC;KACxD,CAAC;CACH,CAAC;;AAEF,MAAa,aAAa,GAA6B,OAAO,CAAC,eAAe,EAAE;IAC9E,UAAU,CAAC,WAAW,EAAE;QACtB,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC;YACrB,KAAK,CAAC,EAAC,SAAS,EAAE,kBAAkB,EAAE,MAAM,EAAE,GAAG,EAAC,CAAC;YACnD,KAAK,CAAC,EAAC,SAAS,EAAE,mBAAmB,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC;YACrD,KAAK,CAAC,EAAC,SAAS,EAAE,eAAe,EAAE,MAAM,EAAE,CAAC,EAAC,CAAC;SAC/C,CAAC,CAAC;KACJ,CAAC;IACF,UAAU,CAAC,YAAY,EAAE;QACvB,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC;YACrB,KAAK,CAAC,EAAC,SAAS,EAAE,mBAAmB,EAAE,MAAM,EAAE,GAAG,EAAC,CAAC;YACpD,KAAK,CAAC,EAAC,SAAS,EAAE,kBAAkB,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC;YACpD,KAAK,CAAC,EAAC,SAAS,EAAE,eAAe,EAAE,MAAM,EAAE,CAAC,EAAC,CAAC;SAC/C,CAAC,CAAC;KACJ,CAAC;CACH,CAAC;;;;;;;;;;;ACrCF,oCAA2C,QAAgB;IACzD,OAAO,KAAK,CACR,4CAA4C,QAAQ,yCAAyC;QAC7F,mGAAmG;QACnG,wBAAwB,CAAC,CAAC;CAC/B;;;;;;;;ICLC,OAAI,EAAE,OAAI,EAAE,SAAM;;;;;;;;;;ACDpB;;;;;AAqIA;;;;;;;;;IAsIE,YAAoB,WAAuB,EACvB,KAAwB,EACxB,OAAe,EACH,QAA4B,EACE,YAAgC,EAClF,iBAAoC;QAL5B,gBAAW,GAAX,WAAW,CAAY;QACvB,UAAK,GAAL,KAAK,CAAmB;QACxB,YAAO,GAAP,OAAO,CAAQ;QACH,aAAQ,GAAR,QAAQ,CAAoB;QACE,iBAAY,GAAZ,YAAY,CAAoB;QAtIpF,mBAAc,GAAG,IAAI,YAAY,EAAQ,CAAC;QAE3C,SAAI,GAA2C,MAAM,CAAC;;QAetD,cAAS,GAA+B,OAAO,CAAC;QAsChD,iBAAY,GAAW,CAAC,CAAC;;QAMxB,mBAAc,GAAG,IAAI,YAAY,EAAK,CAAC;;QAGjD,wBAAmB,GAAG,CAAC,IAAO;YAC5B,OAAO,CAAC,CAAC,IAAI;iBACV,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,2BAA2B,CAAC,IAAI,CAAC,CAAC;iBAC5E,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBACpE,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;SACzE,CAAC;;QA8BF,iBAAY,GAA+B,OAAO,CAAC;QACnD,eAAU,GAAsB,MAAM,CAAC;QAoCrC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,MAAM,0BAA0B,CAAC,iBAAiB,CAAC,CAAC;SACrD;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,sBAAsB,CAAC,CAAC;SAC1D;QAED,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,iBAAiB,CAAC,YAAY,EAAE,CAAC,CAAC;KACrF;;;;;IA5ID,IACI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;;;;;IAED,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;KACzD;;;;;IAQD,IACI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;;;IAED,IAAI,QAAQ,CAAC,KAAe;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;KAC1D;;;;;IAKD,IACI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;;;;;IAED,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;KACzD;;;;;IAKD,IACI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;;;;;IAED,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;KACzD;;;;;;IAwBD,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,kBAAkB,CAAC;KAChC;;;;;IAED,IAAI,WAAW,CAAC,KAAQ;;cAChB,aAAa,GAAG,IAAI,CAAC,kBAAkB;QAC7C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACrF,IAAI,aAAa,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,YAAY,KAAK,OAAO;YAC3E,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,kBAAkB,CAAC,EAAE;YACzE,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,IAAI,CAAC,kBAAkB,CAAC,EAAE;gBACvE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC7B;iBAAM;gBACL,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;aAC5B;SACF;KACF;;;;IAID,aAAa;QACX,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;KAC5B;;;;;IAOD,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KACpD;;;;IAED,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,YAAY,KAAK,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAClH,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC/C;;;;IAED,IAAI,UAAU;QACZ,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;YACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;SACtF;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;KAE/F;;;;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;KAC9D;;;;IAED,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;KAChE;;;;IAqBD,kBAAkB;QAChB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACzD,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;YACzB,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;SAC5B;aAAM,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE;YAC/B,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;SAC7B;aAAM;YACL,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,IAAI,OAAO,CAAC;SAC/C;KACF;;;;IAED,WAAW;QACT,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;KACjC;;;;;;IAGD,aAAa,CAAC,IAAO;QACnB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE;YACxB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;SAC7B;KACF;;;;;;IAGD,cAAc,CAAC,KAAQ;QACrB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;YACzB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;YAC5B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;SAC1B;KACF;;;;;IAED,aAAa,CAAC,IAAO;QACnB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;KAC5B;;;;;IAGD,oBAAoB,CAAC,KAAK;QACxB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3C,IAAI,CAAC,aAAa,EAAE,CAAC;KACtB;;;;;IAGD,mBAAmB,CAAC,KAAK;;QAEvB,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;KAE5B;;;;;IAED,mBAAmB,CAAC,IAAO;QACzB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;KACzB;;;;IAED,YAAY;QACV,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;KAC5B;;;;IAED,YAAY;QACV,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;YACzB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;SAC7B;KACF;;;;IAED,aAAa;QACX,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;KAC1B;;;;IAED,eAAe;QACb,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;KAC5B;;;;;IAGD,gBAAgB;QACd,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,KAAK,OAAO;YAC9C,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;KACxD;;;;;IAGD,YAAY;QACV,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,KAAK,OAAO;YAC9C,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;YACpD,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;KACvD;;;;;IAGD,gBAAgB;QACd,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAC3E;;;;;IAGD,YAAY;QACV,OAAO,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAC3E;;;;;;IAGD,0BAA0B,CAAC,KAAoB;;;;QAI7C,IAAI,IAAI,CAAC,YAAY,KAAK,OAAO,EAAE;YACjC,IAAI,CAAC,qCAAqC,CAAC,KAAK,CAAC,CAAC;SACnD;aAAM,IAAI,IAAI,CAAC,YAAY,KAAK,MAAM,EAAE;YACvC,IAAI,CAAC,oCAAoC,CAAC,KAAK,CAAC,CAAC;SAClD;aAAM;YACL,IAAI,CAAC,qCAAqC,CAAC,KAAK,CAAC,CAAC;SACnD;KACF;;;;IAED,gBAAgB;QACd,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;YAC7B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC;gBAC3D,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;aACxC,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;;;;;;;IAGO,WAAW,CAAC,KAAQ,EAAE,KAAQ;QACpC,OAAO,IAAI,CAAC,YAAY,KAAK,OAAO;YAClC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC;gBAC5D,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;YAC9D,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KAChE;;;;;;IAGO,qCAAqC,CAAC,KAAoB;QAChE,QAAQ,KAAK,CAAC,OAAO;YACnB,KAAK,UAAU;gBACb,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;gBACvE,MAAM;YACR,KAAK,WAAW;gBACd,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBACtE,MAAM;YACR,KAAK,QAAQ;gBACX,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;gBACvE,MAAM;YACR,KAAK,UAAU;gBACb,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBACtE,MAAM;YACR,KAAK,IAAI;gBACP,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAC/D,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC/C,MAAM;YACR,KAAK,GAAG;gBACN,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,GAC9D,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC;oBAChD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;gBAC9C,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,MAAM;oBAC7B,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;oBACpD,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;gBACxD,MAAM;YACR,KAAK,SAAS;gBACZ,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,MAAM;oBAC7B,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;oBACnD,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBACvD,MAAM;YACR,KAAK,KAAK;gBACR,IAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;oBAC9C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;;oBAErC,KAAK,CAAC,cAAc,EAAE,CAAC;iBACxB;gBACD,OAAO;YACT;;gBAEE,OAAO;SACV;;QAGD,KAAK,CAAC,cAAc,EAAE,CAAC;KACxB;;;;;;IAGO,oCAAoC,CAAC,KAAoB;QAC/D,QAAQ,KAAK,CAAC,OAAO;YACnB,KAAK,UAAU;gBACb,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;gBACzE,MAAM;YACR,KAAK,WAAW;gBACd,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBACxE,MAAM;YACR,KAAK,QAAQ;gBACX,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC9D,MAAM;YACR,KAAK,UAAU;gBACb,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC9D,MAAM;YACR,KAAK,IAAI;gBACP,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EACjE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC7C,MAAM;YACR,KAAK,GAAG;gBACN,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EACjE,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACjD,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,WAAW;oBACd,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC5E,MAAM;YACR,KAAK,SAAS;gBACZ,IAAI,CAAC,WAAW;oBACd,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC1E,MAAM;YACR,KAAK,KAAK;gBACR,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACtC,MAAM;YACR;;gBAEE,OAAO;SACV;;QAGD,KAAK,CAAC,cAAc,EAAE,CAAC;KACxB;;;;;;IAGO,qCAAqC,CAAC,KAAoB;QAChE,QAAQ,KAAK,CAAC,OAAO;YACnB,KAAK,QAAQ;gBACX,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,IAAI,MAAM;oBAC1C,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;oBACnD,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBACxD,MAAM;YACR,KAAK,UAAU;gBACb,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,IAAI,MAAM;oBAC1C,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;oBACpD,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;gBACzD,MAAM;YACR,KAAK,KAAK;gBACR,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACrC,OAAO;YACT;;gBAEE,OAAO;SACV;;QAGD,KAAK,CAAC,cAAc,EAAE,CAAC;KACxB;;;;;;;IAMO,mBAAmB,CAAC,IAAO;;;;cAG3B,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACrD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC;QAChD,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;KACzD;;;;;;;IAMO,mBAAmB,CAAC,IAAO;;;;cAG3B,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;aACpD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;QAC9C,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;KACzD;;;;;IAEO,aAAa,CAAC,SAAiB;QACrC,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;KACjC;;;;IAED,kBAAkB;QAChB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;KAC1B;;;;;IAEO,OAAO,CAAC,CAAS;QACvB,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KAC7B;;;YA9gBF,SAAS,SAAC;gBACT,QAAQ,EAAE,6BAA6B;gBACvC,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8EX;gBACC,MAAM,EAAE,CAAC,szGAAszG,CAAC;gBACh0G,IAAI,EAAE;oBACJ,qCAAqC,EAAE,MAAM;oBAC7C,UAAU,EAAE,GAAG;oBACf,WAAW,EAAE,oCAAoC;iBAClD;gBACD,UAAU,EAAE,CAAC,aAAa,CAAC;gBAC3B,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;aAChD;;;YApHC,UAAU;YAUH,iBAAiB;YANxB,MAAM;YASC,eAAe,uBAiPT,QAAQ;4CACR,QAAQ,YAAI,MAAM,SAAC,oBAAoB;YAjQpD,iBAAiB;;;6BA2HhB,MAAM;mBAEN,KAAK;sBAGL,KAAK;wBAYL,KAAK;uBAGL,KAAK;sBAYL,KAAK;sBAYL,KAAK;2BAWL,KAAK;yBAGL,KAAK;6BAGL,MAAM;iCA4HN,KAAK;gCAML,KAAK;;;;;;;ACxUR;;;;AAaA;;;;;;;IACE,YAAmB,KAAa,EACb,YAAoB,EACpB,SAAiB,EACjB,OAAgB;QAHhB,UAAK,GAAL,KAAK,CAAQ;QACb,iBAAY,GAAZ,YAAY,CAAQ;QACpB,cAAS,GAAT,SAAS,CAAQ;QACjB,YAAO,GAAP,OAAO,CAAS;KAClC;CACF;;;;;AAkDD;;;;;IA5CA;;QA6DW,YAAO,GAAG,CAAC,CAAC;;QAGZ,2BAAsB,GAAG,KAAK,CAAC;;QAG/B,eAAU,GAAG,CAAC,CAAC;;QAGd,wBAAmB,GAAG,IAAI,YAAY,EAAU,CAAC;KAyB5D;;;;;IAvBC,YAAY,CAAC,IAAmC;QAC9C,IAAI,CAAC,IAAI,CAAC,sBAAsB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjD,OAAO;SACR;QACD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC3C;;;;;IAGD,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM;YACzD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;KAC1C;;;;;;IAED,aAAa,CAAC,QAAgB,EAAE,QAAgB;;YAC1C,UAAU,GAAG,QAAQ,GAAG,IAAI,CAAC,OAAO,GAAG,QAAQ;;QAGnD,IAAI,QAAQ,EAAE;YACZ,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC;SACpC;QAED,OAAO,UAAU,KAAK,IAAI,CAAC,UAAU,CAAC;KACvC;;;YA9FF,SAAS,SAAC;gBACT,QAAQ,EAAE,oCAAoC;gBAC9C,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkCX;gBACC,MAAM,EAAE,CAAC,uhDAAuhD,CAAC;gBACjiD,IAAI,EAAE;oBACJ,OAAO,EAAE,kCAAkC;iBAC5C;gBACD,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;aAChD;;;oBAGE,KAAK;mBAGL,KAAK;yBAGL,KAAK;4BAGL,KAAK;oCAGL,KAAK;sBAGL,KAAK;qCAGL,KAAK;yBAGL,KAAK;kCAGL,MAAM;;;;;;;;ACnFT,MAAa,YAAY,GAAG,EAAE;;AAC9B,MAAa,kBAAkB,GAAG,IAAI;;AACtC,MAAa,kBAAkB,GAAG,KAAK;;AACvC,MAAa,iBAAiB,GAAG,MAAM;;;;;;AAsCvC;;;;;IAoHE,YAAoB,QAAoB,EACpB,QAA4B;QAD5B,aAAQ,GAAR,QAAQ,CAAY;QACpB,aAAQ,GAAR,QAAQ,CAAoB;QAnHtC,mBAAc,GAAG,IAAI,YAAY,EAAQ,CAAC;QA+C5C,iBAAY,GAAG,KAAK,CAAC;QAuBpB,aAAQ,GAAW,CAAC,CAAC;QAErB,eAAU,GAAY,KAAK,CAAC;;QAG3B,mBAAc,GAAG,IAAI,YAAY,EAAK,CAAC;QAEvC,qBAAgB,GAAG,IAAI,YAAY,EAAK,CAAC;;QAGnD,WAAM,GAAkB,EAAE,CAAC;QAC3B,aAAQ,GAAkB,EAAE,CAAC;;QAG7B,cAAS,GAAY,IAAI,CAAC;QAgCxB,IAAI,CAAC,iBAAiB,GAAG,CAAC,KAAU;YAClC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;SAC9B,CAAC;QACF,IAAI,CAAC,eAAe,GAAG;YACrB,IAAI,CAAC,cAAc,EAAE,CAAC;SACvB,CAAC;KACH;;;;;IArHD,IACI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;KACzB;;;;;IAED,IAAI,UAAU,CAAC,KAAQ;;YACjB,aAAa,GAAG,IAAI,CAAC,WAAW;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9E,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE;YAC9D,IAAI,CAAC,KAAK,EAAE,CAAC;SACd;KACF;;;;;IAKD,IACI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;;;IAED,IAAI,QAAQ,CAAC,KAAe;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QACpF,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;SAClC;KACF;;;;;IAKD,IACI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;;;;;IAED,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KACpF;;;;;IAOD,IACI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;;;;;IAED,IAAI,OAAO,CAAC,KAAe;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;KACpF;;;;;;IAKD,IACI,SAAS,CAAC,KAAgB;QAC5B,IAAI,CAAC,SAAS,GAAG,KAAK,IAAI,QAAQ,CAAC;KACpC;;;;IAwBD,IAAI,KAAK;QACP,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5D,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;YAC5D,GAAG,GAAG,CAAC;;YACP,MAAM,GAAG,kBAAkB;QAC/B,IAAI,IAAI,CAAC,SAAS,EAAE;;gBACd,KAAK,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,IAAI,CAAC,aAAa,GAAG,EAAE;YAC7D,MAAM,GAAG,KAAK,GAAG,kBAAkB,GAAG,kBAAkB,CAAC;YACzD,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnB,MAAM,GAAG,kBAAkB,CAAC;aAC7B;YACD,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,IAAI,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SACzD;aAAM;YACL,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,IAAI,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;SACrD;QACD,OAAO;YACL,WAAW,EAAE,UAAU,GAAG,MAAM;YAChC,QAAQ,EAAE,GAAG,MAAM,GAAG;YACtB,YAAY,EAAE,GAAG,EAAE,GAAG,MAAM,GAAG;SAChC,CAAC;KACH;;;;IAeD,kBAAkB;QAChB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QAC5D,IAAI,CAAC,KAAK,EAAE,CAAC;KACd;;;;;;IAGD,gBAAgB,CAAC,KAAU;QACzB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACpB,QAAQ,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC/D,QAAQ,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC/D,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAC3D,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;KAC7D;;;;;IAED,gBAAgB,CAAC,KAAU;QACzB,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KACrB;;;;IAED,cAAc;QACZ,QAAQ,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAClE,QAAQ,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAClE,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAC9D,QAAQ,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAC/D,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC3C;KACF;;;;;IAGO,KAAK;QACX,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;;YAErB,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE;;YACxC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;QAEhD,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;;oBAC/C,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE;;oBACxB,MAAM,GAAG,kBAAkB;;sBACzB,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CACvC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EACtC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EACvC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;;oBAC/C,OAAO,GACT,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;qBACvE,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC3E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oBACf,KAAK,EAAE,CAAC;oBACR,YAAY,EAAE,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC;oBAC3C,OAAO,EAAE,OAAO;oBAChB,GAAG,EAAE,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,iBAAiB;oBACjE,IAAI,EAAE,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,iBAAiB;iBACnE,CAAC,CAAC;aACJ;SACF;aAAM;YACL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;oBACrC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE;;oBACxB,KAAK,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE;;oBACzB,MAAM,GAAG,KAAK,GAAG,kBAAkB,GAAG,kBAAkB;;sBACpD,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CACvC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EACtC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EACvC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;oBAC3C,OAAO,GACT,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;qBACvE,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;qBACxE,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,2BAA2B,CAAC,IAAI,CAAC,CAAC;gBAC/E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oBACf,KAAK,EAAE,CAAC;oBACR,YAAY,EAAE,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC;oBAC3C,OAAO,EAAE,OAAO;oBAChB,GAAG,EAAE,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,iBAAiB;oBACjE,IAAI,EAAE,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,iBAAiB;oBAClE,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,KAAK;iBACvC,CAAC,CAAC;aACJ;SACF;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;;gBAC1C,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE;;kBACvB,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CACvC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EACtC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EACvC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;;gBAChF,OAAO,GACT,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;iBACvE,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBACxE,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,2BAA2B,CAAC,MAAM,CAAC,CAAC;YACjF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACjB,KAAK,EAAE,CAAC;gBACR,YAAY,EAAE,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC;gBAC7C,OAAO,EAAE,OAAO;gBAChB,GAAG,EAAE,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,kBAAkB,GAAG,iBAAiB;gBAC7E,IAAI,EAAE,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,kBAAkB,GAAG,iBAAiB;aAC/E,CAAC,CAAC;SACJ;KACF;;;;;;IAMO,OAAO,CAAC,KAAU;;YACpBC,UAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa;;YACrC,WAAW,GAAGA,UAAO,CAAC,qBAAqB,EAAE;;YAC7C,KAAK,GAAGA,UAAO,CAAC,WAAW;;YAC3B,MAAM,GAAGA,UAAO,CAAC,YAAY;;YAC7B,KAAK,GAAG,KAAK,CAAC,KAAK,KAAK,SAAS,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK;;YACxE,KAAK,GAAG,KAAK,CAAC,KAAK,KAAK,SAAS,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK;;YACxE,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,KAAK,KAAK,GAAG,WAAW,CAAC,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC;;YACjE,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,KAAK,GAAG,WAAW,CAAC,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC;;YACjE,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;;YAC1B,IAAI,GAAG,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;;YACnF,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;YAC5B,KAAK,GAAG,IAAI,CAAC,SAAS,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,kBAAkB,GAAG,GAAG,CAAC;aACnE,KAAK,IAAI,kBAAkB,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC;QAE3C,IAAI,MAAM,GAAG,CAAC,EAAE;YACd,MAAM,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,MAAM,CAAC;SAC/B;;YACG,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;;YAEjC,IAAI;QACR,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnB,KAAK,GAAG,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;aAClC;iBAAM;gBACL,IAAI,KAAK,KAAK,EAAE,EAAE;oBAChB,KAAK,GAAG,CAAC,CAAC;iBACX;gBACD,KAAK,GAAG,KAAK,IAAI,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,KAAK,IAAI,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,EAAE,CAAC;aAC3E;YACD,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CACjC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EACtC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EACvC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;SAC5F;aAAM;YACL,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC;aACxB;YACD,IAAI,KAAK,KAAK,EAAE,EAAE;gBAChB,KAAK,GAAG,CAAC,CAAC;aACX;YACD,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CACjC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EACtC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EACvC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,CAAC,CAAC;SAC1F;;cAEK,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC;QACzE,IAAI,IAAI,KAAK,OAAO,EAAE;YACpB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;YAC1B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC7C;KACF;;;YA1TF,SAAS,SAAC;gBACT,QAAQ,EAAE,0BAA0B;gBACpC,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;CAqBX;gBACC,MAAM,EAAE,CAAC,ksDAAksD,CAAC;gBAC5sD,IAAI,EAAE;oBACJ,MAAM,EAAE,OAAO;oBACf,aAAa,EAAE,0BAA0B;iBAC1C;aACF;;;YAhDC,UAAU;YAKH,eAAe;;;6BA8CrB,MAAM;yBAKN,KAAK;uBAgBL,KAAK;sBAeL,KAAK;sBAcL,KAAK;wBAYL,KAAK;yBAML,KAAK;uBAEL,KAAK;yBAEL,KAAK;6BAGL,MAAM;+BAEN,MAAM;;;;;;;ACpIT;;;;IAyCI,iBAAiB,GAAG,CAAC;;;;;;;;;AAqCzB;;;;IAKE,kBAAkB;QAChB,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;KACnC;;;;;;IAMD,cAAc,CAAC,KAAoB;QACjC,IAAI,KAAK,CAAC,OAAO,KAAK,MAAM,EAAE;YAC5B,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;YAC5B,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,KAAK,CAAC,eAAe,EAAE,CAAC;SACzB;KACF;;;YA/CF,SAAS,SAAC;gBACT,QAAQ,EAAE,4BAA4B;gBACtC,QAAQ,EAAE;;;;;;;;;;;;;;;;CAgBX;gBACC,MAAM,EAAE,CAAC,8xCAA8xC,CAAC;gBACxyC,IAAI,EAAE;oBACJ,OAAO,EAAE,4BAA4B;oBACrC,0CAA0C,EAAE,yBAAyB;oBACrE,WAAW,EAAE,wBAAwB;iBACtC;gBACD,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;aAChD;;;wBAIE,SAAS,SAAC,yBAAyB;;;;;AA2BtC;;;;;;;;;;;IAgJE,YAAoB,OAAkB,EAClB,QAAiB,EACjB,OAAe,EACf,iBAAmC,EACK,eAAe,EAC3C,YAAgC,EAChC,IAAoB,EACF,SAAc;QAP5C,YAAO,GAAP,OAAO,CAAW;QAClB,aAAQ,GAAR,QAAQ,CAAS;QACjB,YAAO,GAAP,OAAO,CAAQ;QACf,sBAAiB,GAAjB,iBAAiB,CAAkB;QACK,oBAAe,GAAf,eAAe,CAAA;QAC3C,iBAAY,GAAZ,YAAY,CAAoB;QAChC,SAAI,GAAJ,IAAI,CAAgB;QACF,cAAS,GAAT,SAAS,CAAK;;QAvIvD,cAAS,GAA+B,OAAO,CAAC;QAChD,SAAI,GAAsC,MAAM,CAAC;QACjD,iBAAY,GAAW,CAAC,CAAC;QAsB1B,UAAK,GAA2C,MAAM,CAAC;QAevD,aAAQ,GAAG,KAAK,CAAC;;;;;QAwBf,oBAAe,GAAG,IAAI,YAAY,EAAK,CAAC;QAKzC,uBAAkB,GAAG,SAAS,CAAC;QAC/B,sBAAiB,GAAG,QAAQ,CAAC;;QAGpB,iBAAY,GAAuB,IAAI,YAAY,EAAQ,CAAC;;QAG5D,iBAAY,GAAuB,IAAI,YAAY,EAAQ,CAAC;;QAG9E,WAAM,GAAG,KAAK,CAAC;;QAGf,OAAE,GAAG,sBAAsB,iBAAiB,EAAE,EAAE,CAAC;QAWzC,mBAAc,GAAa,IAAI,CAAC;;QA0BhC,8BAAyB,GAAuB,IAAI,CAAC;QAErD,uBAAkB,GAAG,YAAY,CAAC,KAAK,CAAC;;QAMhD,oBAAe,GAAG,IAAI,OAAO,EAAW,CAAC;QAUvC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,aAAa,CAAC,CAAC;SACjD;KACF;;;;;IAzJD,IACI,OAAO;;;QAGT,OAAO,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;KACtF;;;;;IAED,IAAI,OAAO,CAAC,IAAc;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;KAC5D;;;;IASD,IACI,WAAW,KAAc,OAAO,IAAI,CAAC,YAAY,CAAC,EAAE;;;;;IACxD,IAAI,WAAW,CAAC,KAAc,IAAI,IAAI,CAAC,YAAY,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;;;;IAGrF,YAAY;QACV,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,EAAE;YACpC,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;KACF;;;;IAED,IACI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;KACnB;;;;;IAED,IAAI,IAAI,CAAC,KAA6C;QACpD,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,MAAM,CAAC;KAC9B;;;;;;IAQD,IACI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;;;;;IAED,IAAI,OAAO,CAAC,KAAc;QACxB,IAAI,CAAC,QAAQ,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;KAC9C;;;;;IAKD,IACI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,IAAI,CAAC,gBAAgB;YAC1D,IAAI,CAAC,gBAAgB,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;KACrD;;;;;IAED,IAAI,QAAQ,CAAC,KAAc;;cACnB,QAAQ,GAAG,qBAAqB,CAAC,KAAK,CAAC;QAE7C,IAAI,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE;YAC/B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACrC;KACF;;;;;IA6BD,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,cAAc,CAAC;KAC5B;;;;;IAED,IAAI,SAAS,CAAC,KAAe;QAC3B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;KAC7B;;;;;IAKD,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC;KAC3D;;;;;IAGD,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC;KAC3D;;;;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC;KACnE;;;;IAmCD,WAAW;QACT,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;QACtC,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;QAEhC,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;SAC1B;KACF;;;;;;IAGD,OAAO,CAAC,IAAO;;cACP,QAAQ,GAAG,IAAI,CAAC,SAAS;QAC/B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE;;YAE7D,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACjC;KACF;;;;;;IAMD,cAAc,CAAC,KAAgC;QAC7C,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,MAAM,KAAK,CAAC,6DAA6D,CAAC,CAAC;SAC5E;QACD,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,kBAAkB;YACrB,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,KAAe,KAAK,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC;KAC7F;;;;;IAGD,IAAI;QACF,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;YAChC,OAAO;SACR;QACD,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,MAAM,KAAK,CAAC,8DAA8D,CAAC,CAAC;SAC7E;QACD,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;SAC/D;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAC1D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;KAC1B;;;;;IAGD,KAAK;QACH,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO;SACR;QACD,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE;YAClD,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;SACzB;QACD,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;YACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SACxB;QACD,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE;YAC3D,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;SAC/B;;cAEK,aAAa,GAAG;;;YAGpB,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBACpB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;gBACzB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;aACvC;SACF;QAED,IAAI,IAAI,CAAC,yBAAyB;YAChC,OAAO,IAAI,CAAC,yBAAyB,CAAC,KAAK,KAAK,UAAU,EAAE;;;;;;YAM5D,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC;YACvC,UAAU,CAAC,aAAa,CAAC,CAAC;SAC3B;aAAM;YACL,aAAa,EAAE,CAAC;SACjB;KACF;;;;;IAGO,aAAa;QACnB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,wBAAwB,EAAE;YAC5D,SAAS,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK;YAC9C,gBAAgB,EAAE,IAAI,CAAC,iBAAiB;YACxC,UAAU,EAAE,2BAA2B;SACxC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,cAAc,GAAG,IAAI,CAAC;KACzD;;;;;IAGO,YAAY;QAClB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,CAA8B,wBAAwB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;SAC3H;QAED,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;QAED,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE;;kBAC3B,YAAY,GAChB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;YAC7C,YAAY,CAAC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC;;YAG5C,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC;gBAC3D,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;aACjC,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAC9D;;;;;IAGO,YAAY;;cACZ,aAAa,GAAG,IAAI,aAAa,CAAC;YACtC,gBAAgB,EAAE,IAAI,CAAC,4BAA4B,EAAE;YACrD,WAAW,EAAE,IAAI;YACjB,aAAa,EAAE,kCAAkC;YACjD,SAAS,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK;YAC9C,cAAc,EAAE,IAAI,CAAC,eAAe,EAAE;YACtC,UAAU,EAAE,0BAA0B;SACvC,CAAC;QAEF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;KACtD;;;;;IAGO,4BAA4B;QAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;aAC5B,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,4BAA4B,EAAE,EAC/D,EAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAC,EACrC,EAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAC,CACrC;aACA,oBAAoB,CACnB,EAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAC,EAClC,EAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAC,CACxC;aACA,oBAAoB,CACnB,EAAC,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAC,EACnC,EAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAC,CACnC;aACA,oBAAoB,CACnB,EAAC,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAC,EAChC,EAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAC,CACtC,CAAC;KACL;;;YAnUF,SAAS,SAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,QAAQ,EAAE,mBAAmB;gBAC7B,QAAQ,EAAE,EAAE;gBACZ,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,mBAAmB,EAAE,KAAK;aAC3B;;;YA9EC,SAAS;YAzBT,OAAO;YAeP,MAAM;YAKN,gBAAgB;4CAwOH,MAAM,SAAC,8BAA8B;YA9N3C,eAAe,uBA+NT,QAAQ;YAjQd,cAAc,uBAkQR,QAAQ;4CACR,QAAQ,YAAI,MAAM,SAAC,QAAQ;;;sBArJvC,KAAK;wBAcL,KAAK;mBACL,KAAK;2BACL,KAAK;0BAEL,KAAK;mBAWL,KAAK;sBAeL,KAAK;uBAYL,KAAK;8BAqBL,MAAM;yBAGN,KAAK;iCAEL,KAAK;gCACL,KAAK;2BAGL,MAAM,SAAC,QAAQ;2BAGf,MAAM,SAAC,QAAQ;;;;;;;ACvMlB;;AAsCA,MAAa,iCAAiC,GAAQ;IACpD,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,MAAM,sBAAsB,CAAC;IACrD,KAAK,EAAE,IAAI;CACZ;;AAED,MAAa,6BAA6B,GAAQ;IAChD,OAAO,EAAE,aAAa;IACtB,WAAW,EAAE,UAAU,CAAC,MAAM,sBAAsB,CAAC;IACrD,KAAK,EAAE,IAAI;CACZ;;;;;;;AAOD;;;;;IAIE,YAAmB,MAAiC,EAAS,aAA0B;QAApE,WAAM,GAAN,MAAM,CAA2B;QAAS,kBAAa,GAAb,aAAa,CAAa;QACrF,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;KAChC;CACF;;;;;AAwBD;;;;;;;IA8LE,YAAoB,WAAuB,EACZ,YAAgC,EACD,YAAgC,EAC9D,UAAwB;QAHpC,gBAAW,GAAX,WAAW,CAAY;QACZ,iBAAY,GAAZ,YAAY,CAAoB;QACD,iBAAY,GAAZ,YAAY,CAAoB;QAC9D,eAAU,GAAV,UAAU,CAAc;;QAhE9C,eAAU,GAAG,IAAI,YAAY,EAAkC,CAAC;;QAGhE,cAAS,GAAG,IAAI,YAAY,EAAkC,CAAC;;QAGzE,iBAAY,GAAG,IAAI,YAAY,EAAY,CAAC;;QAG5C,oBAAe,GAAG,IAAI,YAAY,EAAW,CAAC;QAE9C,eAAU,GAAG;SACZ,CAAA;QAEO,iBAAY,GAAyB;SAC5C,CAAA;QAEO,uBAAkB,GAAG;SAC5B,CAAA;QAEO,4BAAuB,GAAG,YAAY,CAAC,KAAK,CAAC;QAE7C,wBAAmB,GAAG,YAAY,CAAC,KAAK,CAAC;;QAGzC,oBAAe,GAAgB;YACrC,OAAO,IAAI,CAAC,eAAe;gBACzB,IAAI,GAAG,EAAC,oBAAoB,EAAE,EAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAC,EAAC,CAAC;SACjF,CAAA;;QAGO,kBAAa,GAAgB,CAAC,OAAwB;;kBACtD,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvG,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY;gBAChC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,CAAC;gBAC9D,IAAI,GAAG,EAAC,kBAAkB,EAAE,EAAC,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,YAAY,EAAC,EAAC,CAAC;SAC1E,CAAA;;QAGO,kBAAa,GAAgB,CAAC,OAAwB;;kBACtD,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvG,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY;gBAChC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,CAAC;gBAC9D,IAAI,GAAG,EAAC,kBAAkB,EAAE,EAAC,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,YAAY,EAAC,EAAC,CAAC;SAC1E,CAAA;;QAGO,qBAAgB,GAAgB,CAAC,OAAwB;;kBACzD,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvG,OAAO,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,2BAA2B,CAAC,IAAI,CAAC;gBAC3G,IAAI,GAAG,EAAC,qBAAqB,EAAE,IAAI,EAAC,CAAC;SACxC,CAAA;;QAGO,eAAU,GAChB,UAAU,CAAC,OAAO,CAChB,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;;QAGnF,oBAAe,GAAG,KAAK,CAAC;QAM9B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,iBAAiB,CAAC,CAAC;SACrD;QACD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,sBAAsB,CAAC,CAAC;SAC1D;;QAGD,IAAI,CAAC,mBAAmB,GAAG,YAAY,CAAC,aAAa,CAAC,SAAS,CAAC;YAC9D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;SACzB,CAAC,CAAC;KACJ;;;;;;IA1MD,IACI,iBAAiB,CAAC,KAA2B;QAC/C,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;KAChC;;;;;IAIO,kBAAkB,CAAC,KAA2B;QACpD,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SACvC;KACF;;;;;IAED,IAAa,mBAAmB,CAAC,MAAsE;QACrG,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;QAC1B,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC3B;;;;;IAKD,IACI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;KACpB;;;;;IAED,IAAI,KAAK,CAAC,KAAe;QACvB,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC7C,IAAI,CAAC,eAAe,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAClE,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;;cAC9C,OAAO,GAAG,IAAI,CAAC,KAAK;QAC1B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;;QAGzB,UAAU,CAAC;YACT,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;gBACnD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC/B;SACF,CAAC,CAAC;KACJ;;;;IAEO,gBAAgB;QACtB,QAAQ,IAAI,CAAC,WAAW,CAAC,IAAI;YAC3B,KAAK,MAAM;gBACT,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC;YAC7C,KAAK,UAAU;gBACb,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC;YACjD,KAAK,MAAM;gBACT,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC;YAC7C,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC;SAC/C;KACF;;;;IAEO,cAAc;;YAChB,WAAW;QAEf,QAAQ,IAAI,CAAC,WAAW,CAAC,IAAI;YAC3B,KAAK,MAAM;gBACT,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC;gBAChD,MAAM;YACR,KAAK,UAAU;gBACb,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,aAAa,CAAC;gBACpD,MAAM;YACR,KAAK,MAAM;gBACT,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC;gBAChD,MAAM;YACR,KAAK,OAAO;gBACV,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,UAAU,CAAC;gBACjD,MAAM;SACT;QACD,IAAI,CAAC,WAAW,EAAE;YAChB,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC;SACjD;QAED,OAAO,WAAW,CAAC;KACpB;;;;;IAKD,IACI,GAAG;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;;;;;IAED,IAAI,GAAG,CAAC,KAAe;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QACvF,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC3B;;;;;IAKD,IACI,GAAG;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;;;;;IAED,IAAI,GAAG,CAAC,KAAe;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QACvF,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC3B;;;;;IAKD,IACI,QAAQ;QACV,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;KACzB;;;;;IAED,IAAI,QAAQ,CAAC,KAAU;;cACf,QAAQ,GAAG,qBAAqB,CAAC,KAAK,CAAC;QAE7C,IAAI,IAAI,CAAC,SAAS,KAAK,QAAQ,EAAE;YAC/B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACrC;KACF;;;;IAmFD,kBAAkB;QAChB,IAAI,IAAI,CAAC,WAAW,EAAE;;YAEpB,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,QAAW;gBAClF,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;gBACtB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;gBAC5B,IAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,2BAA2B,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;gBAC3F,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,2BAA2B,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;aAC7F,CAAC,CAAC;SACN;KACF;;;;IAED,WAAW;QACT,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;QACvC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC7B,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;KACjC;;;;;IAED,yBAAyB,CAAC,EAAc;QACtC,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;KAC9B;;;;;IAED,QAAQ,CAAC,CAAkB;QACzB,OAAO,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;KACpD;;;;;IAMD,4BAA4B;QAC1B,OAAO,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC;KAC1E;;;;;;IAGD,UAAU,CAAC,KAAQ;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACpB;;;;;;IAGD,gBAAgB,CAAC,EAAwB;QACvC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;KACxB;;;;;;IAGD,iBAAiB,CAAC,EAAc;QAC9B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;KACtB;;;;;;IAGD,gBAAgB,CAAC,QAAiB;QAChC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC1B;;;;;IAED,UAAU,CAAC,KAAoB;QAC7B,IAAI,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,KAAK,UAAU,EAAE;YAChD,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACxB,KAAK,CAAC,cAAc,EAAE,CAAC;SACxB;KACF;;;;;IAED,QAAQ,CAAC,KAAa;;YAChB,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,EAAE,CAAC;QAChE,IAAI,CAAC,eAAe,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChE,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,2BAA2B,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;KAC5F;;;;IAED,SAAS;QACP,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,2BAA2B,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;KAC7F;;;;;IAGD,OAAO;;QAEL,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC/B;QAED,IAAI,CAAC,UAAU,EAAE,CAAC;KACnB;;;;;;IAGQ,YAAY,CAAC,KAAe;QAClC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK;YAClC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,GAAG,EAAE,CAAC;KACzE;;;YA/TH,SAAS,SAAC;gBACT,QAAQ,EAAE,0BAA0B;gBACpC,SAAS,EAAE;oBACT,iCAAiC;oBACjC,6BAA6B;oBAC7B,EAAC,OAAO,EAAE,wBAAwB,EAAE,WAAW,EAAE,sBAAsB,EAAC;iBACzE;gBACD,IAAI,EAAE;oBACJ,sBAAsB,EAAE,MAAM;oBAC9B,kBAAkB,EAAE,iDAAiD;oBACrE,YAAY,EAAE,0CAA0C;oBACxD,YAAY,EAAE,0CAA0C;oBACxD,YAAY,EAAE,UAAU;oBACxB,SAAS,EAAE,4BAA4B;oBACvC,SAAS,EAAE,+BAA+B;oBAC1C,UAAU,EAAE,aAAa;oBACzB,QAAQ,EAAE,WAAW;oBACrB,WAAW,EAAE,oBAAoB;iBAClC;gBACD,QAAQ,EAAE,oBAAoB;aAC/B;;;YAhFC,UAAU;YAsBH,eAAe,uBA0PT,QAAQ;4CACR,QAAQ,YAAI,MAAM,SAAC,oBAAoB;YA7P7C,YAAY,uBA8PN,QAAQ;;;gCA9LpB,KAAK;kCAcL,KAAK;oBAQL,KAAK;kBA6DL,KAAK;kBAaL,KAAK;uBAaL,KAAK;yBAiBL,MAAM;wBAGN,MAAM;;;;;;;AC1NT;;;AA6CA;;;;;IAgBE,YAAmB,KAAwB,EAAU,kBAAqC;QAAvE,UAAK,GAAL,KAAK,CAAmB;QAAU,uBAAkB,GAAlB,kBAAkB,CAAmB;QAflF,kBAAa,GAAG,YAAY,CAAC,KAAK,CAAC;KAemD;;;;;IAT9F,IACI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,KAAK,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;KACvF;;;;;IACD,IAAI,QAAQ,CAAC,KAAc;QACzB,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;KAC/C;;;;;IAKD,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC3B;KACF;;;;IAED,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;KAClC;;;;IAED,kBAAkB;QAChB,IAAI,CAAC,kBAAkB,EAAE,CAAC;KAC3B;;;;;IAED,KAAK,CAAC,KAAY;QAChB,IAAI,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACzC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;YAC3B,KAAK,CAAC,eAAe,EAAE,CAAC;SACzB;KACF;;;;IAEO,kBAAkB;;cAClB,kBAAkB,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,GAAGC,EAAY,EAAE;;cAC/F,aAAa,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,gBAAgB;YAC7E,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,eAAe,GAAGA,EAAY,EAAE;QAEzE,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,kBAAkB,EAAE,aAAa,CAAC;aAC5E,SAAS,CAAC,MAAM,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC,CAAC;KAC9D;;;YA5EF,SAAS,SAAC;gBACT,QAAQ,EAAE,2BAA2B;gBACrC,QAAQ,EAAE;;;;;;;;;;;;;;;;;;CAkBX;gBACC,IAAI,EAAE;oBACJ,OAAO,EAAE,2BAA2B;iBACrC;gBACD,QAAQ,EAAE,yBAAyB;gBACnC,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,mBAAmB,EAAE,KAAK;gBAC1B,eAAe,EAAE,uBAAuB,CAAC,MAAM;aAChD;;;YAhCQ,iBAAiB;YARxB,iBAAiB;;;6BA6ChB,KAAK,SAAC,KAAK;uBAGX,KAAK;;;;;;;;MC7BF,aAAa,GAAG,CAAC;;;;;;AA2BvB;;;;;IAqEE,YAA+B,QAA4B,EACG,YAAgC;QAD/D,aAAQ,GAAR,QAAQ,CAAoB;QACG,iBAAY,GAAZ,YAAY,CAAoB;QApErF,SAAI,GAA2C,MAAM,CAAC;QAErD,mBAAc,GAAG,IAAI,YAAY,EAAQ,CAAC;;QA2C1C,mBAAc,GAAG,IAAI,YAAY,EAAK,CAAC;QAwB/C,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,MAAM,0BAA0B,CAAC,iBAAiB,CAAC,CAAC;SACrD;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,sBAAsB,CAAC,CAAC;SAC1D;;cAEK,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE;;cAClD,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,QAAQ,CAAC;;cAC1D,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC;;;YAGxD,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;YACtC,OAAO,EAAC,IAAI,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC,CAAC,EAAC,CAAC;SAC1C,CAAC;QACF,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC;QAE1F,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;KAC1C;;;;;IAjFD,IACI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;KACzB;;;;;IAED,IAAI,UAAU,CAAC,KAAQ;;YACjB,aAAa,GAAG,IAAI,CAAC,WAAW;QACpC,IAAI,CAAC,WAAW,GAAG,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QAClD,IAAI,aAAa,IAAI,IAAI,CAAC,WAAW;YACnC,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE;YAClE,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE;gBAChE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC7B;iBAAM;gBACL,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;aAC5B;SACF;KACF;;;;;IAKD,IACI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;;;IAED,IAAI,QAAQ,CAAC,KAAQ;QACnB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACjE;;;;IAqDD,kBAAkB;QAChB,IAAI,CAAC,KAAK,EAAE,CAAC;KACd;;;;;;IAGD,aAAa,CAAC,IAAY;;cAClB,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAC/C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAC/E,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAC5C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE3C,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC;QAC7B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KACxC;;;;;IAGO,KAAK;QACX,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;;YAEjE,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EACpF,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,EAC1C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EACtC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC3C,IAAI,CAAC,gBAAgB;YACnB,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC;gBACvD,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,IAAI,aAAa,CAAC;QAEvD,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACzB;;;;;IAGO,gBAAgB;;YAClB,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC;;YAC9D,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE;QAC5C,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAG,IAAI,EAAE,EAAE;YAC3E,IAAI,IAAI,IAAI,aAAa,EAAE;gBACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACrB,IAAI,GAAG,CAAC,CAAC;aACV;;gBACG,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CACrC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EACtC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,EAC9C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EACtC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;gBACvC,OAAO,GAAG,CAAC,IAAI,CAAC,UAAU;gBAC5B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;;gBACnB,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC;YACnF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;iBAChC,IAAI,CAAC,IAAI,6BAA6B,CAAC,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;SACrF;KACF;;;;;;;IAMO,sBAAsB,CAAC,IAAO;QACpC,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC;YAC1D,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;KACtC;;;;;IAEO,aAAa,CAAC,SAAiB;QACrC,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;KACjC;;;;IAED,kBAAkB;QAChB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;KAC1B;;;YAtLF,SAAS,SAAC;gBACT,QAAQ,EAAE,+BAA+B;gBACzC,QAAQ,EAAE;;;;;;;;;;;;;;CAcX;gBACC,UAAU,EAAE,CAAC,aAAa,CAAC;gBAC3B,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;aAChD;;;YAhCC,eAAe,uBAsGF,QAAQ;4CACR,QAAQ,YAAI,MAAM,SAAC,oBAAoB;;;mBApEnD,KAAK;6BAEL,MAAM;yBAKN,KAAK;uBAsBL,KAAK;yBAaL,KAAK;6BAGL,MAAM;;;;;;;;;;;;AChDT;;;;;IAgEE,YAA+B,QAA4B,EACG,YAAgC;QAD/D,aAAQ,GAAR,QAAQ,CAAoB;QACG,iBAAY,GAAZ,YAAY,CAAoB;QA/DpF,mBAAc,GAAG,IAAI,YAAY,EAAQ,CAAC;QAE3C,SAAI,GAA2C,MAAM,CAAC;;QAyCrD,mBAAc,GAAG,IAAI,YAAY,EAAK,CAAC;QAqB/C,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,MAAM,0BAA0B,CAAC,iBAAiB,CAAC,CAAC;SACrD;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,0BAA0B,CAAC,sBAAsB,CAAC,CAAC;SAC1D;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;KAC1C;;;;;IApED,IACI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;KACzB;;;;;IAED,IAAI,UAAU,CAAC,KAAQ;;YACjB,aAAa,GAAG,IAAI,CAAC,WAAW;QACpC,IAAI,CAAC,WAAW,GAAG,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QAClD,IAAI,aAAa,IAAI,IAAI,CAAC,WAAW;YACnC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE;YAC1D,IAAI,CAAC,KAAK,EAAE,CAAC;;;;;;SAMd;KACF;;;;;IAKD,IACI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;;;IAED,IAAI,QAAQ,CAAC,KAAQ;QACnB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAClE;;;;IAwCD,kBAAkB;QAChB,IAAI,CAAC,KAAK,EAAE,CAAC;KACd;;;;;;IAGD,cAAc,CAAC,KAAa;;cACpB,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAC/C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAC7C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EACtC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EACtC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE3C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvC,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC;QAC7B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;KAC7B;;;;;IAGO,KAAK;QACX,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;QACtE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;YAEzD,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC;;QAErD,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAC1E,KAAK,IAAI,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KACjE;;;;;;;IAMO,sBAAsB,CAAC,IAAO;QACpC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC;YAClD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;KACvC;;;;;;;IAGO,mBAAmB,CAAC,KAAa,EAAE,SAAiB;;YACtD,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAClC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,CAAC,EAC3E,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EACtC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAC3C,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC;QAC/C,OAAO,IAAI,6BAA6B,CACtC,KAAK,EAAE,SAAS,CAAC,iBAAiB,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;KACjF;;;;;;IAGO,eAAe,CAAC,KAAa;QACnC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;;YAEG,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAC7C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,CAAC,EAChD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EACtC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;QAG3C,KAAK,IAAI,IAAI,GAAG,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,KAAK,EAC9D,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE;YAClD,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACzB,OAAO,IAAI,CAAC;aACb;SACF;QAED,OAAO,KAAK,CAAC;KACd;;;;;;;IAMD,kBAAkB;QAChB,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;KAC1B;;;YAhLF,SAAS,SAAC;gBACT,QAAQ,EAAE,8BAA8B;gBACxC,QAAQ,EAAE;;;;;;;;;;;;;;;CAeX;gBACC,UAAU,EAAE,CAAC,aAAa,CAAC;gBAC3B,aAAa,EAAE,iBAAiB,CAAC,IAAI;gBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;aAChD;;;YA5BC,eAAe,uBA6FF,QAAQ;4CACR,QAAQ,YAAI,MAAM,SAAC,oBAAoB;;;6BA/DnD,MAAM;mBAEN,KAAK;yBAGL,KAAK;uBAsBL,KAAK;yBAaL,KAAK;6BAGL,MAAM;;;;;;;AC9FT;;;YAqBC,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;oBACZ,eAAe;oBACf,eAAe;oBACf,aAAa;oBACb,aAAa;oBACb,UAAU;iBACX;gBACD,eAAe,EAAE;oBACf,wBAAwB;iBACzB;gBACD,YAAY,EAAE;oBACZ,yBAAyB;oBACzB,6BAA6B;oBAC7B,sBAAsB;oBACtB,iBAAiB;oBACjB,uBAAuB;oBACvB,sBAAsB;oBACtB,wBAAwB;oBACxB,0BAA0B;oBAC1B,yBAAyB;iBAC1B;gBACD,OAAO,EAAE;oBACP,yBAAyB;oBACzB,6BAA6B;oBAC7B,sBAAsB;oBACtB,iBAAiB;oBACjB,uBAAuB;oBACvB,sBAAsB;oBACtB,wBAAwB;oBACxB,0BAA0B;oBAC1B,yBAAyB;iBAC1B;aACF;;;;;;;;;;;;;;;;;;;;"}
